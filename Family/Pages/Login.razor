@page "/login"
@using Family.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row" style="">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <input @bind="model.Username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <input @bind="model.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Submit</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string? Username;
        public string? Password;
    }
    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.Username);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Wrong login or password");
            return;
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new AuthState
                {
                    UserName = model.Username,
                    Role = userAccount.Role
                });
        }
        navManager.NavigateTo("/", true);
    }
}
