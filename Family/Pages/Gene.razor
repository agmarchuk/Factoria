@page "/gene/{entityId?}"

@using FactographData
@using Family.Data;
@using Family.Models

@inject NavigationManager NavManager
@inject FactographData.IFDataService db

<div style="">
    <input @bind="searchsample" style="height:24px; margin-top:0px;margin-bottom:10px;" />
    <span>расш.<input type="checkbox" @bind="extended" /></span>
    <span> </span>
    <div style="display: inline-block; float:right; ">
        <a href="edit/@(entityId)">ред</a> |
        <a href="gene/@(entityId)">род</a>
    </div>
</div>
@if (!string.IsNullOrEmpty(searchsample))
{
    IEnumerable<RRecord> query = null;
    if (!extended)
    {
        query = (new RYEngine(db)).RSearch(searchsample);
    }
    else
    {
        query = (new RYEngine(db)).RSearchByWords(searchsample);
    }


    query = query.Where(r => r.Tp == "http://fogid.net/o/person");
    // Убрать дубли
    query = query.Distinct(new RRecordComparer());
    if (!extended) { query = query.OrderBy(r => r.GetName()); }
    query = query.ToArray();
    foreach (RRecord rec in query)
    {
        <div>
            <a href="javascript:void(0)" @onclick="@(e =>SearchResultClick(rec))">@rec.GetName()</a>
        </div>
    }
}
@if (recordlevels == null || recordlevels.Count() == 0) { return; }
<p class="grad">
    <a href="gene" class="nov"><img src="images/ico-home.gif" class="ico-home" alt="" />Родословная</a>
    &raquo;
    @if (fm != null)
    {
        <a href="gene/@(fm.Id)">@(fm.GetName())</a>
        <span> &raquo; </span>
    }
    @(recordlevels[0].node.GetName())
    @*&raquo;
        m.GetName()*@
</p>

@{
    foreach (var rl in recordlevels)
    {
        int otstup = 80 * rl.level;
        <div style="margin-left:@(otstup)px;">
            <Family.Components.ViewMidiPortrait record="@(rl.node)" />

            @foreach (var sp in rl.spouse)
            {
                <img src="images/family.jpg" width="12" />
                <Family.Components.ViewMidiPortrait record="@(sp)" />
            }
        </div>
    }
}

@code {
    [Parameter]
    public string entityId { get; set; }


    private string searchsample;
    private bool extended = false;
    private RRecord focusrecord;
    private GeneTreeModel[] recordlevels = null;


    private GeneTreeModel BuildMidiPortrait(string id, GeneTreeModel parent_node)
    {
        RRecord record = (new RYEngine(db)).GetRRecord(id, true);
        if (record == null) return null;
        if (record.Tp != "http://fogid.net/o/person") throw new Exception("Err: 2229 Tp=" + record.Tp);
        List<RRecord> spouse = new List<RRecord>();
        foreach (RProperty p in record.Props)
        {
            if (p is RInverseLink)
            {
                RInverseLink ril = (RInverseLink)p;
                if (ril.Prop == "http://fogid.net/o/husband")
                {
                    RRecord family = (new RYEngine(db)).GetRRecord(ril.Source);
                    spouse.Add((new RYEngine(db)).GetRRecord(family.GetDirectResource("http://fogid.net/o/wife")));
                }
                if (ril.Prop == "http://fogid.net/o/wife")
                {
                    RRecord family = (new RYEngine(db)).GetRRecord(ril.Source);
                    spouse.Add((new RYEngine(db)).GetRRecord(family.GetDirectResource("http://fogid.net/o/husband")));
                }

            }
        }
        GeneTreeModel model = new GeneTreeModel() { node = record, parent = parent_node, spouse = spouse };
        var childs = record.Props
                .Where(p => p is RInverseLink && (p.Prop == "http://fogid.net/o/father" || p.Prop == "http://fogid.net/o/mother"))
                .Cast<RInverseLink>()
                .Select(ril => BuildMidiPortrait(ril.Source, model));
        model.childs = childs.ToArray();
        return model;
    }
    private RRecord fm;
    private void Build(string id)
    {
        GeneTreeModel gt_model = BuildMidiPortrait(id, null);
        if (gt_model == null) return;
        focusrecord = gt_model.node;
        recordlevels = GeneTreeModel.Traverse(gt_model);
        // Предки
        var rtree = new RRecordTree(recordlevels[0].node.Id, db.ontology, new RYEngine(db));
        fm = rtree.GetDirect("http://fogid.net/o/father");
        if (fm == null) fm = rtree.GetDirect("http://fogid.net/o/mother");

    }
    private void SearchResultClick(RRecord rec)
    {
        searchsample = null;
        extended = false;
        Build(rec.Id);
    }
    protected override void OnParametersSet()
    {
        if (entityId != null)
        {
            Build(entityId);
        }
    }
}
