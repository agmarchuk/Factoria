@page "/look/{entityId?}"
@using FactographData.r;
@using FactographData;
@inject FactographData.IFDataService db

<Family.Components.Info id="@entityId" />
<Family.Components.ViewSearch target="look" typs="@(tps)" searchsample="" />

@if (record != null)
{
    <div>
    <span style="color:coral;">@(db.ontology.LabelOfOnto(record.Tp))</span>
    <span>&nbsp; @(record.Id)</span> 
    </div>

    @if (record.Tp == "http://fogid.net/o/collection" || record.Tp == "http://fogid.net/o/cassette")
    {
        <Family.Components.LookCollection rec="@(record)" />
    }
}

@code {
    [Parameter] // Фокусная запись
    public string? entityId { get; set; }
    //[Parameter] // Внешная запись
    //public string eid { get; set; }
    //private string Tp = "notp";
    private string[] tps = new string[0];
    private RRecord? record = null;
    //private Rec tree = null;
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (tps.Length == 0) tps = db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").ToArray();

        if (string.IsNullOrEmpty(entityId))
        {
            entityId = "start2023";
            //entityId = "famwf1233_1001";
        }

        var adapter = db.GetAdapter();
        record = ObjToRRecord(adapter.GetRecord(entityId));

        string Tp = "notype";
        Rec shablon;
        if (Tp == "http://fogid.net/o/person")
        {
            shablon = new Rec(null, "http://fogid.net/o/person",
                new Tex("http://fogid.net/o/name"),
                new Tex("http://fogid.net/o/description"),
                new Inv("http://fogid.net/o/reflected",
                new Rec(null, "http://fogid.net/o/reflection",
                    new Dir("http://fogid.net/o/in-doc",
                        new Rec(null, "http://fogid.net/o/document",
                            new Tex("http://fogid.net/o/name"),
                            new Str("http://fogid.net/o/from-date")),
                        new Rec(null, "http://fogid.net/o/photo-doc",
                            new Tex("http://fogid.net/o/name"),
                            new Str("http://fogid.net/o/from-date"),
                            new Str("http://fogid.net/o/uri"),
                            new Str("http://fogid.net/o/docmetainfo"))))
                    ));
        }
        else if (Tp == "http://fogid.net/o/collection" || Tp == "http://fogid.net/o/cassette")
        {
            shablon = new Rec(null, "http://fogid.net/o/collection",
                new Tex("http://fogid.net/o/description"),
                new Inv("http://fogid.net/o/in-collection",
                new Rec(null, "http://fogid.net/o/collection-member",
                    new Dir("http://fogid.net/o/collection-item",
                        new Rec(null, "http://fogid.net/o/document",
                            new Tex("http://fogid.net/o/name"),
                            new Str("http://fogid.net/o/from-date")),
                        new Rec(null, "http://fogid.net/o/photo-doc",
                            new Tex("http://fogid.net/o/name"),
                            new Str("http://fogid.net/o/from-date"),
                            new Str("http://fogid.net/o/uri"),
                            new Str("http://fogid.net/o/docmetainfo")),
                        new Rec(null, null,
                            new Tex("http://fogid.net/o/name"),
                            new Str("http://fogid.net/o/from-date"))
                            ))
                    ));
        }

        //tree = Rec.Build(rrec, shablon, id => ObjToRRecord(adapter.GetRecord(id)));
    }

    private RRecord? ObjToRRecord(object obj)
    {
        if (obj == null) return null;
        object[] ob = (object[])obj;
        object[] props = (object[])ob[2];
        RRecord res = new RRecord { Id = (string)ob[0], Tp = (string)ob[1] };
        //res.Props
        var query = props.Cast<object[]>().Select<object[], RProperty>(p =>
        {
            int tag = (int)p[0];
            object[] alt = (object[])p[1];
            string pred = (string)alt[0];
            if (tag == 1) return new RField
                { Prop = pred, Value = (string)alt[1], Lang = (string)alt[2] };
            else if (tag == 2) return new RLink()
                { Prop = pred, Resource = (string)alt[1] };
            else if (tag == 3) return new RInverseLink()
                { Prop = pred, Source = (string)alt[1] };
            throw new Exception("Err: 398492");
        }).ToArray();
        res.Props = query;
        return res;
    }

}
