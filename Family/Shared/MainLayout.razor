@inherits LayoutComponentBase
@* @using Family.Authentication;
@using Family.Models;
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inject AuthenticationStateProvider authStateProvider
@inject ProtectedSessionStorage storage
@inject NavigationManager navManager *@

<PageTitle>Семейный архив</PageTitle>

<div class="page">
    <main>
        @* <div style="height:64px; background-image:url(VertPoloska.jpg)">
            <div class="px-4" style="float:right;">
                <div style="border: 1px solid; ">
                    <select>
                        <option>ru</option>
                        <option>en</option>
                    </select>
                    <AuthorizeView>
                        <Authorized>&nbsp;&nbsp;<span>@(context.User.Identity?.Name)</span> <a @onclick="Logout" href="javascript:voi(0)">Logout</a></Authorized>
                        <NotAuthorized><a href="login">Login</a></NotAuthorized>
                    </AuthorizeView>
                    </div>
                <div style="width: 200px; color:lightyellow;">
                    
                </div>
            </div>
            <img src="FlyingBirdsSmall.jpg"/>
            <span style="font-size:large;font-weight:bold;">Семейный архив</span>
        </div> *@
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {

    @* private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    } *@
    
    //private bool isConnected = false;
    //private SessionState sessState = new SessionState();
    //private async Task Logout()
    //{
    //    var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
    //    await customAuthStateProvider.UpdateAuthenticationState(null);
    //    navManager.NavigateTo("/", true);
    //}

    //async Task SelectRegime(ChangeEventArgs e)
    //{
    //    string? reg = e.Value?.ToString();
    //    sessState.Regime = reg;
    //    await SetSessionStateAsync();
    //    //StateHasChanged();
    //}
    //private async Task SetSessionStateAsync()
    //{
    //    await storage.SetAsync("UserState", sessState);
    //}

    //private async Task GetStateAsync()
    //{
    //    var us = await storage.GetAsync<SessionState>("UserState");
    //    if (us.Success) sessState = us.Value;
    //    else sessState = new SessionState();
    //}

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    await base.OnAfterRenderAsync(firstRender);
    //    if (firstRender)
    //    {
    //        await GetStateAsync();
    //        StateHasChanged();
    //    }
    //}    
}