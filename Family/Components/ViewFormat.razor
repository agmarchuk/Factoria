@using FactographData;
@using FactographData.r;
@using Family.Data;
@inject IFDataService db

<Family.Components.TableFormat records="@(new Rec[] { tree })" recordId="@(entityId)" />

<table>
@{
    var invProps = tree.Props.Where(p => p is Inv).Cast<Inv>().ToArray();
    foreach (var iProp in invProps)
    {
        string pred = iProp.Pred;
        (string, Rec[])[] groups = iProp.Sources.Where(g => g != null)
            .GroupBy(g => g.Tp).Select(ig => (ig.Key, ig.ToArray()))
            .ToArray();
            <tr valign="top">
                <td>
                    <span style="color:green;">@(db.ontology.InvLabelOfOnto(pred))</span>
                </td>
                <td>
                    @foreach (var gr in groups)
                    {
                    <Family.Components.TableFormat records="@(gr.Item2)" level="1" />
                    }
                </td>
            </tr>
    }
}
</table>


@code {
    [Parameter]
    public string? entityId { get; set; }

    private Rec tree = new Rec("noname", "notype");

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (entityId == null) 
        {
            return;
            entityId = "famwf1233_1001";
        }
        RRecord? rRecord = db.GetRRecord(entityId, true);
        if (rRecord != null)
        {
            string ty = rRecord.Tp;
            Rec shablon = (new Family.Models.Shablon(db)).GetUniShablon(ty, 2, null);
            tree = Rec.Build(rRecord, shablon, id => db.GetRRecord(id, true));
        }
    }

}
