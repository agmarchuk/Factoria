@using FactographData
@using FactographData.r;
@using Family.Data
@inject FactographData.IFDataService db

@if(recTree != null) foreach (var v in recTree.Props)
{
    if (v is Tex)
    {
        var tx = Family.Data.Utils.OneText((Tex)v);
        <span>&nbsp; @(tx)</span>
    }
    else if (v is Str)
    {
        string? s = ((Str)v).Value;
        @if (v.Pred == "http://fogid.net/o/from-date")
        {
            string d = Utils.DatePrinted(s);
            <span>&nbsp; @(d)</span>
        }
        else if (v.Pred == "http://fogid.net/o/to-date")
        {
            string d = Utils.DatePrinted(s);
            if (!string.IsNullOrEmpty(d))
            {
            <span> -@(d)</span>
            }
        }
        else if (db.ontology.IsEnumeration(v.Pred))
        {
            <span>&nbsp; @(db.ontology.EnumValue(v.Pred, s, "ru"))</span>
        }
        else
        {
            <span>&nbsp; @(s)</span>
        }
    }
    else if (v is Dir)
    {
        if (level > 0 && (((Dir)v).Resources).Length > 0 && ((Dir)v).Resources[0] != null)
        {
            Rec record = ((Dir)v).Resources[0];
            string? nm = record.GetText("http://fogid.net/o/name");
            string tit = Utils.Inline(record, db.ontology);
            <span style="color:chocolate;">&nbsp; @(db.ontology.LabelOfOnto(v.Pred)): </span>
            <a href="@(regime)/@(record.Id)" title="@(tit)">@(nm)</a> 
        }
    }
    else if (v is Inv)
    {
        Rec[] records = ((Inv)v).Sources;
        if ((v.Pred == "http://fogid.net/o/father" || v.Pred == "http://fogid.net/o/mother") && level > 0)
        {
            <span style="color:green;">&nbsp; ����: </span>
            foreach (Rec rec in records)
            {
                string? nm = rec.GetText("http://fogid.net/o/name");
                string tit = Utils.Inline(rec, db.ontology);
                <span>&nbsp;</span>
                <a href="@(regime)/@(rec.Id)" title="@(tit)">@(nm)</a>
            }
        }
        else
        {
            <span style="color:green;">&nbsp; @(db.ontology.InvLabelOfOnto(v.Pred)): </span>
            foreach (Rec rec in records.Where(r => r != null))
            {
                <Family.Components.InlinePortrait recTree="@(rec)" level="1" />
            }
        }
    }
}


@code {
    [Parameter]
    public Rec? recTree { get; set; }
    [Parameter]
    public int level { get; set; } = 2;
    [Parameter]
    public string? forbidden { get; set; }
    [Parameter]
    public string regime { get; set; } = "view";
    //private RRecord? rRecord = null;
    //private Rec? tree = null;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //if (entityId != null)
        //{
        //    rRecord = db.GetRRecord(entityId, true);
        //}
        //string ty = "http://fogid.net/o/person";

        //Rec shablon = GetUniShablon(ty, 2, null);
        //tree = Rec.Build(rRecord, shablon, id => db.GetRRecord(id, true));
    }
    private Rec GetUniShablon(string ty, int level, string? forbidden)
    {
        // ��� ������ ���������� ��������
        string[] dprops = db.ontology.GetDirectPropsByType(ty).ToArray();
        var propsdirect = dprops.Select<string, Pro?>(pid =>
            {
                var os = db.ontology.OntoSpec
                    .FirstOrDefault(o => o.Id == pid);
                if (os == null) return null;
                if (os.Tp == "DatatypeProperty")
                {
                    var tt = db.ontology.RangesOfProp(pid).FirstOrDefault();
                    bool istext = tt == "http://fogid.net/o/text" ? true : false;
                    if (istext) return new Tex(pid);
                    else return new Str(pid);
                }
                else if (os.Tp == "ObjectProperty" && level > 0 && os.Id != forbidden)
                {
                    var tt = db.ontology.RangesOfProp(pid).FirstOrDefault();
                    if (tt == null) return null;
                    return new Dir(pid, new Rec[] { GetUniShablon(tt, 0, null) }); // ����������� ��������� �������
                }
                return null;
            }).ToArray();
        string[] iprops = level > 1 ? db.ontology.GetInversePropsByType(ty).ToArray() : new string[0];
        var propsinverse = iprops.Select<string, Pro?>(pid =>
            {
                var os = db.ontology.OntoSpec
                    .FirstOrDefault(o => o.Id == pid);
                if (os == null) return null;
                if (os.Tp == "ObjectProperty")
                {
                    string[] tps = db.ontology.DomainsOfProp(pid).ToArray();
                    if (tps.Length == 0) return null;
                    return new Inv(pid, tps.Select(t => GetUniShablon(t, level - 1, pid)).ToArray());
                }
                return null;
            }).ToArray();
        var shab = new Rec(null, ty,
            propsdirect
            .Concat(propsinverse)
            .Where(p => p != null)
            .Cast<Pro>()
            .ToArray());
        return shab;
    }

}
