@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Family.Models;

@inject ProtectedSessionStorage ProtectedSessionStore

<div>
    <div style="float:right; ">
        <input value="@as_model.User" @onchange="FixName" />           
    </div>
    <div>
        <a href="/"><span class="oi oi-home" aria-hidden="true"></span> Home</a> &nbsp;
        <select @onchange="FixView">
            @if (as_model.Regime == "view")
            {
                <option selected value="view">БД</option>
            }
            else
            {
                <option value="view">БД</option>
            }
            @if (as_model.Regime == "gene")
            {
                <option selected value="gene">Дерево</option>
            }
            else
            {
                <option value="gene">Дерево</option>
            }
            @if (as_model.Regime == "edit")
            {
                <option selected value="edit">Редактирование</option>
            }
            else
            {
                <option value="edit">Редактирование</option>
            }
        </select>
    </div>
</div>
@code {
    [Parameter]
    public EventCallback onChange { get; set; }

    public AppStateModel as_model { get; set; } = new AppStateModel();

    private async Task FixName(ChangeEventArgs args)
    {
        as_model.User = args?.Value?.ToString(); 
        await SaveUserState();
    }
    private async Task FixView(ChangeEventArgs args)
    {
        as_model.Regime = args?.Value?.ToString() ?? "view";
        await SaveUserState();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            as_model = (await ProtectedSessionStore.GetAsync<AppStateModel>("UserState")).Value ?? new AppStateModel();
            StateHasChanged();
        }
    }


    private async Task SaveUserState()
    {
        await ProtectedSessionStore.SetAsync("UserState", as_model);
        await onChange.InvokeAsync(as_model);
    }
}



