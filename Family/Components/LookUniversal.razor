@using System.Collections.Generic
@using System.Linq
@using FactographData;
@using FactographData.r;
@using Family.Data;

@inject IFDataService db

<div style="font-weight:bold; font-size:larger;">@(tree.GetText("http://fogid.net/o/name"))</div>
@{
    string dates = tree.GetDates();
    string descr = tree.GetText("http://fogid.net/o/description");
    <p>
        @if (!string.IsNullOrEmpty(dates))
        {
            <span>@(dates)</span>
        }
        @if (!string.IsNullOrEmpty(descr))
        {
            <span>,&nbsp;@(descr)</span>
        }
    </p>
}
@{
    // Семейные отношения. Актуально только для персон. 
    if (tree.Tp == "http://fogid.net/o/person")
    {
        // Четыре варианта: папа, мама, жена/муж, ребенок
        var pprops = tree.Props
            .Where(p => 
                p is Dir && (p.Pred == "http://fogid.net/o/father" || p.Pred == "http://fogid.net/o/mother") ||
                p is Inv && (p.Pred == "http://fogid.net/o/husband"|| p.Pred == "http://fogid.net/o/wife" ||
                p.Pred == "http://fogid.net/o/father" || p.Pred == "http://fogid.net/o/mother") ||
                false)
            .ToArray();
        if (pprops.Length > 0)
        {
            <h3 style="color:green;">Семья</h3>
            <table style=""><tr><td>
            @foreach (var p in pprops)
            {
                string prefix = "";
                
                @if (p is Dir && ((Dir)p).Resources.Length > 0)
                {
                    Dir d = (Dir)p;
                    Rec re = d.Resources[0];
                    if (d.Pred == "http://fogid.net/o/father")
                    {
                        prefix = "Отец:";
                    } else if ((d.Pred == "http://fogid.net/o/mother")){
                        prefix = "Мать:";
                    }
                    <div style="float:left; width: 200px; height: 200px; border:solid 1px;">                    
                        <span>@(prefix)</span>
                    <Family.Components.Inline200x200 tree="@(((Dir)p).Resources[0])" />
                    </div>
                }
                else if (p is Inv && p.Pred == "http://fogid.net/o/husband")
                {
                    Inv ii = (Inv)p;
                    Rec[] families = ii.Sources;
                    foreach (Rec fam in families)
                    {
                        Rec? r = fam.GetDirect("http://fogid.net/o/wife");
                        if (r != null) 
                        {
                        <div style="float:left; width: 200px; height: 200px; border:solid 1px;">                        
                        <span>Супруга: </span>
                        <Family.Components.Inline200x200 tree="@(r)" />
                        </div>
                        }
                    }
                }
                else if (p is Inv && p.Pred == "http://fogid.net/o/wife")
                {
                    Inv ii = (Inv)p;
                    Rec[] families = ii.Sources;
                    foreach (Rec fam in families)
                    {
                        Rec? r = fam.GetDirect("http://fogid.net/o/husband");
                        if (r != null) 
                        {
                            <div style="float:left; width: 200px; height: 200px; border:solid 1px;">
                                <span>Супруг: </span>
                                <Family.Components.Inline200x200 tree="@(r)" />
                            </div>
                        }
                    }
                }
                else if (p is Inv && (p.Pred == "http://fogid.net/o/father"|| p.Pred == "http://fogid.net/o/mother"))
                {
                    Inv ii = (Inv)p;
                    Rec[] childs = ii.Sources;
                    foreach (Rec r in childs)
                    {
                        <div style="float:left; width: 200px; height: 200px; border:solid 1px;">
                            <span>Ребенок: </span>
                            <Family.Components.Inline200x200 tree="@(r)" />
                        </div>
                    }
                } 
                
            }
            </td></tr></table>
        }
    }
    // Изображу другие обратные отношения 
    foreach (var p in tree.Props)
    {
        if (p is Inv)
        {
            Inv ii = (Inv)p;
            if (ii.Sources.Length == 0) continue;
            string pred = ii.Pred;
            string header = headers.ContainsKey(pred) ? headers[pred] : pred;
            if (pred == "http://fogid.net/o/husband" || pred == "http://fogid.net/o/wife" || 
                pred == "http://fogid.net/o/father" || pred == "http://fogid.net/o/mother" ) continue;
            <h3 style="color:green;">@(header)</h3>

            @if (pred == "http://fogid.net/o/reflected")
            {
                <table style=""><tr><td>
                    @foreach (Rec r in ii.Sources)
                    {
                    <div style="float:left; width: 200px; height: 200px; border:solid 0px;">
                        <div>
                            @if (r != null)
                            {
                                var p0 = r.Props.FirstOrDefault(p => p is Dir);
                                if (p0 != null && ((Dir)p0).Resources.Length > 0)
                                {
                                    Dir d = (Dir)p0;
                                    <Family.Components.Inline200x200 tree="@(d.Resources[0])" />
                                }
                            }
                            else
                            {
                                <span>невыявленный объект рисования</span>                                
                            }
                        </div>
                    </div>
                    }
                </td></tr></table>    
            }
            else
            {
                @foreach (Rec r in ii.Sources)
                {
                    <div>
                        <Family.Components.InlinePortrait recTree="@(r)" regime="look"/> 
                    </div>
                }
            }

        } 
    }
    
}



@code {
    [Parameter]
    public string? entityId { get; set; }


    private RRecord? rRecord = null;
    private Rec tree = new Rec("noid", "notype");
    private static Dictionary<string, string> headers = new Dictionary<string, string>();
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (headers.Count == 0)
        {
            var pairs = new string[] 
            {"http://fogid.net/o/reflected,Отражен" 
            ,"http://fogid.net/o/participant,Участник" 
            ,"http://fogid.net/o/something,Проживание/Нахождение"
            ,"http://fogid.net/o/in-org,Участники"
            //,"http://fogid.net/o/, "
            };
            headers = pairs.Select(s => s.Split(','))
                .ToDictionary(ar => ar[0], ar => ar[1]);
        }
        if (entityId != null)
        {
            rRecord = db.GetRRecord(entityId, true);
            if (rRecord != null)
            {
                Rec shablon = GetUniShablon(rRecord.Tp, 2, null);
                //Console.WriteLine(shablon.ToString());
                tree = Rec.Build(rRecord, shablon, db.ontology, id => db.GetRRecord(id, true));
            }
        }
  

    }
    private Rec GetUniShablon(string ty, int level, string? forbidden)
    {
        // Все прямые возможнные свойства
        string[] dprops = db.ontology.GetDirectPropsByType(ty).ToArray();
        var propsdirect = dprops.Select<string, Pro?>(pid =>
            {
                var os = db.ontology.OntoSpec
                    .FirstOrDefault(o => o.Id == pid);
                if (os == null) return null;
                if (os.Tp == "DatatypeProperty")
                {
                    var tt = db.ontology.RangesOfProp(pid).FirstOrDefault();
                    bool istext = tt == "http://fogid.net/o/text" ? true : false;
                    if (istext) return new Tex(pid);
                    else return new Str(pid);
                }
                else if (os.Tp == "ObjectProperty" && level > 0 && os.Id != forbidden)
                {
                    var tt = db.ontology.RangesOfProp(pid).FirstOrDefault();
                    if (tt == null) return null;
                    return new Dir(pid, new Rec[] { GetUniShablon(tt, level-1, null) }); // Укорачивает развертку шаблона
                }
                return null;
            }).ToArray();
        string[] iprops = level > 1 ? db.ontology.GetInversePropsByType(ty).ToArray() : new string[0];
        var propsinverse = iprops.Select<string, Pro?>(pid =>
            {
                var os = db.ontology.OntoSpec
                    .FirstOrDefault(o => o.Id == pid);
                if (os == null) return null;
                if (os.Tp == "ObjectProperty")
                {
                    string[] tps = db.ontology.DomainsOfProp(pid).ToArray();
                    if (tps.Length == 0) return null;
                    return new Inv(pid, tps.Select(t => GetUniShablon(t, level - 1, pid)).ToArray());
                }
                return null;
            }).ToArray();
        var shab = new Rec(null, ty,
            propsdirect
            .Concat(propsinverse)
            .Where(p => p != null)
            .Cast<Pro>()
            .ToArray());
        return shab;
    }
    
}
