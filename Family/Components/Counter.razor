@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Family.Models
@inject ProtectedSessionStorage storage

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<select @onchange='SelectRegime'>
@if (sessState.Regime == "view")
{
    <option value="view" selected>просмотр</option>
}
else
{
    <option value="view">просмотр</option>
}
@if (sessState.Regime == "edit")
{
    <option value="edit" selected>редактир</option>
}
else
{
    <option value="edit">редактир</option>
}
@if (sessState.Regime == "gene")
{
    <option value="gene" selected>семья</option>
}
else
{
    <option value="gene">семья</option>
}
</select>

@code {
    private SessionState sessState = new SessionState();
    async Task SelectRegime(ChangeEventArgs e)
    {
        string? reg = e.Value?.ToString();
        sessState.Regime = reg;
        await SetSessionStateAsync();
        await GetStateAsync();
        //var look = t.AsyncState;
        StateHasChanged();
    }
    private async Task SetSessionStateAsync()
    {
        currentCount++;
        await storage.SetAsync("UserState", sessState);
    }
    private async Task GetStateAsync()
    {
        SessionState us = (await storage.GetAsync<SessionState>("UserState")).Value;
        if (us == null) System.Console.WriteLine("null!!!");
        else
        {
            System.Console.WriteLine($"{us.Regime} {us.Lang}");
        }
        sessState = us;
    }

    private int currentCount;
    //private bool isConnected = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            currentCount = (await storage.GetAsync<int>("count")).Value;
            sessState = (await storage.GetAsync<SessionState>("UserState")).Value;
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        currentCount = (await storage.GetAsync<int>("count")).Value;
    }

    private async Task IncrementCount()
    {
        currentCount++;
        await storage.SetAsync("count", currentCount);
    }
}