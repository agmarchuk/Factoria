@using FactographData
@inject IFDataService db

<div>
    <input @bind="searchsample" style="height:24px; margin-top:0px;margin-bottom:10px;" />
    <select @bind="searchtype" style="height:24px; margin-top:0px;margin-bottom:10px;">
        <option value=""></option>
        @foreach (var typ in typs.Where(t => db.ontology.LabelOfOnto(t) != null)) //TODO: Надо бы более корректно...
        {
            <option value="@typ">@(db.ontology.LabelOfOnto(typ))</option>
        }
    </select>
    <span>расш.<input type="checkbox" @bind="extended" /></span>
</div>
@if (!string.IsNullOrEmpty(searchsample))
{
    IEnumerable<RRecord> query = null;
    if (!extended)
    {
        query = (new RYEngine(db) { User = user }).RSearch(searchsample);
    }
    else
    {
        query = (new RYEngine(db) { User = user }).RSearchByWords(searchsample);
    }


    if (string.IsNullOrEmpty(searchtype)) query = query.Where(r => typs.Contains(r.Tp));
    else query = query.Where(r => r.Tp == searchtype);
    // Убрать дубли
    query = query.Distinct(new RRecordComparer());
    if (!extended) { query = query.OrderBy(r => r.GetName()); }
    bool nothing = true;
    foreach (RRecord rec in query)
    {
        nothing = false;
        <div>
            <a href="javascript:void(0)" @onclick="@(e =>SearchResultClick(rec))">@rec.GetName()</a>
            <span style="color:red;">@(db.ontology.LabelOfOnto(rec.Tp))</span>
        </div>
    }
    if (nothing)
    {
        <div>Ничего не найдено</div>
    }
    if (toedit && !string.IsNullOrEmpty(searchtype))
    {
        <div><a href="javascript:void(0)" @onclick="@(e =>NewItemClick(searchtype))">нов.</a></div>
    }
}

@code{
    [Parameter]
    public EventCallback onSelected { get; set; }
    [Parameter]
    public string searchsample { get; set; }
    [Parameter]
    public string[] typs { get; set; }
    [Parameter]
    public string user { get; set; }
    private bool toedit { get { return !string.IsNullOrEmpty(user); } }
    private bool extended = false;

    private async Task SearchResultClick(RRecord rec)
    {
        searchsample = null;
        extended = false;
        await onSelected.InvokeAsync(rec.Id);
    }
    private async Task NewItemClick(string tp)
    {
        string nid = (new RYEngine(db) { User = user }).NewRecord(searchtype, searchsample);
        searchsample = null;
        await onSelected.InvokeAsync(nid);
    }
    private string searchtype;
}
