@page "/setparams"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedLocalStorage ProtectedLocalStore
@inject NavigationManager navManager

@if (isConnected)
{
    <span>Общие</span>
    <input type="checkbox" @bind="ic0" /> <span>|</span>
    <span>Детали</span>
    <input type="checkbox" @bind="ic1" /> <span>|</span>
    <span>Семья</span>
    <input type="checkbox" @bind="ic2" /> <span>|</span>
    <span>География</span>
    <input type="checkbox" @bind="ic3" /> <span>|</span>
    <span>Архив</span>
    <input type="checkbox" @bind="ic4" /> <span>|</span>
    <span>Обучение</span>
    <input type="checkbox" @bind="ic5" /> <span>|</span>
    <span>Автор/получатель</span>
    <input type="checkbox" @bind="ic6" /> <span>|</span>
    <span>Коммуникации</span>
    <input type="checkbox" @bind="ic7" /> <span>|</span>

    <button @onclick="OnChange" >OK</button>
    <button @onclick="OnCancel">Cancel</button>
}
else
{
    <p>Loading...</p>
}

@code {
    private bool ic0 = true;
    private bool ic1 = false;
    private bool ic2 = false;
    private bool ic3 = false;
    private bool ic4 = false;
    private bool ic5 = false;
    private bool ic6 = false;
    private bool ic7 = false;

    private void OnChange()
    {
        ic0 = true;
        string sbor = 
            //(ic0 ? "0 " : "") +
            (ic1 ? "1 " : "") +
            (ic2 ? "2 " : "") +
            (ic3 ? "3 " : "") +
            (ic4 ? "4 " : "") +
            (ic5 ? "5 " : "") +
            (ic6 ? "6 " : "") +
            (ic7 ? "7 " : "");
        ProtectedLocalStore.SetAsync("setSbor", sbor);
        navManager.NavigateTo("", true);
    }
    private void OnCancel()
    {
        navManager.NavigateTo("", true);
    }

    //private string setString = ""; // Идентификаторы через запятую без пробелов
    //private HashSet<string> hashSet = new HashSet<string>();
    private bool isConnected;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isConnected = true;
            await LoadStateAsync();
            StateHasChanged();
        }
    }

    private async Task LoadStateAsync()
    {
        int[] vec = new int[] { 0 };
        try
        {
            var result = await ProtectedLocalStore.GetAsync<string>("setSbor");
            if (result.Success && !string.IsNullOrEmpty(result.Value))
            {
                vec = result.Value.Split(' ').Where(v => !string.IsNullOrEmpty(v)).Select(v => Int32.Parse(v)).ToArray();
            }
        } catch (Exception) {  }

        bool[] mask = Enumerable.Repeat(false, 8).ToArray();
        for (int i = 0; i < vec.Length; i++) mask[vec[i]] = true;
        mask[0] = true;
        ic0 = mask[0]; ic1 = mask[1]; ic2 = mask[2]; ic3 = mask[3];
        ic4 = mask[4]; ic5 = mask[5]; ic6 = mask[6]; ic7 = mask[7];
    }

}