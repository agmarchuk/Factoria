@page "/portrait/{entityId?}/{mode?}"
@using FTTree.Components
@using FTTree.Data
@using FactographData
@using FactographData.r;
@using OAData.Adapters
@inject FactographData.IFDataService db

<PageTitle>Portrait</PageTitle>
<AuthorizeView>
    <Authorized>
<div>Auth: @context.User.Claims.FirstOrDefault().Type</div>
 <div>Name: @context.User.Identity.Name</div>
    </Authorized>
</AuthorizeView>
<h1>Portrait</h1>
@if (mode == MainLayout.viewMode)
{
    <NavLink href="@($"/portrait/{entityId}/{MainLayout.editMode}")">Edit</NavLink>
} 
else
{
    <NavLink href="@($"/portrait/{entityId}")">View</NavLink>
}
<DynamicComponent Type="componentType" Parameters="@(new Dictionary<string, object>(){{"recs",new Rec[]{currentRecord} }})"> </DynamicComponent>
@foreach (var inverse in inverses)
{
    var sources = ((Inv)inverse).Sources;
    @if (mode == MainLayout.viewMode && sources.Length == 0)
    {
        continue;
    }
    <h3>@db.GetOntLabel(inverse.Pred)</h3>
    <DynamicComponent Type="componentType" Parameters="@(new Dictionary<string, object>(){{"recs",sources}, {"forbidden", inverse.Pred}})"></DynamicComponent>

    @*foreach(var typedInv in ((TInvTree)inverse).Sources)
    {
        <h4>@db.GetOntLabel(typedInv.Pred)</h4>
        var sources = ((TTypedInv)typedInv).Sources.OrderBy(el => el.Id).ToArray();
        <DynamicComponent Type="componentType" Parameters="@(new Dictionary<string, object>(){{"recs",sources}, {"forbidden", inverse.Pred}})"></DynamicComponent>

    @*}*@
}



@code {
    [Parameter]
    public string entityId { get; set; }

    [Parameter]
    public string mode { get; set; }

    private Type componentType = typeof(RecViewer);

    private Rec currentRecord;

    private Pro[] inverses = null;

    protected override void OnInitialized() // = On Page Load
    {
        if (entityId != null)
        {
            //currentRecord = db.TBuilder.BuildTTree(entityId);
            object[] obj = (object[])db.GetAdapter().GetRecord(entityId);
            currentRecord = Rec.BuildByObj(obj, db.GenereateTempalate(obj[1].ToString(), 2, entityId), db.GetAdapter().GetRecord);
            inverses = currentRecord.Props.Where(prop => prop is Inv).ToArray();
            //inverses = currentRecord.Groups.Where(gr => gr is TInvTree).ToArray();
            mode = mode != MainLayout.editMode ? MainLayout.viewMode : mode;
            componentType = mode == MainLayout.editMode ? typeof(RecEditor) : typeof(RecViewer);
        }
    }

    protected override void OnParametersSet()
    {
        OnInitialized();
    }
}
