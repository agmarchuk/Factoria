@using Data
@using FactographData
@using System.Net.Http.Json
@using System.Net.Http
@implements ITreeComponent
@inject FactographData.IFDataService db

<table>
    @for (int ttreeInd = 0; ttreeInd < ttrees.Count(); ttreeInd++)
    {
        var ttree = ttrees[ttreeInd];
        var texts = ttree.Groups.Where(gr => gr is TTexts).ToArray();
        var directs = ttree.Groups.Where(gr => gr is TDTree).ToArray();
        var possibleDirects = db.ontology.GetDirectPropsByType(ttree.Tp).ToArray();

        @if (ttreeInd == 0)
        {
            <tr>
                @foreach (var possibleDirect in possibleDirects)
                {
                    <th>@db.GetOntLabel(possibleDirect)</th>

                }
            </tr>
        }
        <tr>
            @for (int i = 0; i < possibleDirects.Count(); i++)
            {
                var possibleDirect = possibleDirects[i];
                var value = texts.FirstOrDefault(text => text.Pred == possibleDirect);
                var ranges = db.ontology.RangesOfProp(possibleDirect);
                var isObject = db.IsObject(ranges.First());
                //var anc = db.ontology.AncestorsAndSelf(possibleDirect);
                if (!isObject)
                {
                    bool isEnum = db.ontology.IsEnumeration(possibleDirect);
                    if (isEnum)
                    {
                        var options = db.ontology.EnumPairs(possibleDirect, MainLayout.defaultLanguage);
                        if (editedRow == ttreeInd)
                        {
                            var currValue = "null";
                            if (value != null)
                            {
                                currValue = ((TTexts)value).Values.FirstOrDefault()?.Text;
                            }
                            <td>
                                <select @onchange="@(arg => {
                                        if (value == null) {
                                            var newTexts = new TGroup[ttree.Groups.Length + 1];
                                            ttree.Groups.CopyTo(newTexts, 0);
                                            var textLan = new TextLan(arg.Value.ToString(), "");
                                            var textLanArr = new TextLan[1]{textLan};
                                            newTexts[ttree.Groups.Length] = new TTexts(possibleDirect, textLanArr);
                                            ttree.Groups = newTexts;
                                        } else {
                                            ((TTexts)value).Values[0].Text = arg.Value.ToString();
                                        }
                                    })">
                                    <option value="null"></option>
                                    @foreach (var option in options)
                                    {
                                        if (option.Key == currValue)
                                        {
                                            <option value="@option.Key" selected>@option.Value</option>
                                        }
                                        else
                                        {
                                            <option value="@option.Key">@option.Value</option>
                                        }
                                    }
                                </select>
                            </td>
                        }
                        else
                        {
                            if (value != null)
                            {
                                <td>@db.GetLangText(value, value.Pred)</td>
                            } else
                            {
                                <td></td>
                            }

                        }

                    }
                    else
                    {
                        var textVal = db.GetLangText(value);
                        if (editedRow == ttreeInd)
                        {
                            if (value == null)
                            {
                                var newTexts = new TGroup[ttree.Groups.Length + 1];
                                ttree.Groups.CopyTo(newTexts, 0);
                                var textLan = new TextLan("", MainLayout.defaultLanguage);
                                var textLanArr = new TextLan[1]{textLan};
                                newTexts[ttree.Groups.Length] = new TTexts(possibleDirect, textLanArr);
                                ttree.Groups = newTexts;
                                <td><input type="text" @bind-value="@textLan.Text" /></td>

                            }
                            else
                            {
                                var editIndex = GetLangIndex((TTexts)value, textVal);
                                <td><input type="text" @bind-value="@(((TTexts)value).Values[editIndex].Text)" /></td>
                            }
                        } else
                        {
                            <td>@textVal</td>
                        }
                    }

                }
                else
                {
                    value = directs.FirstOrDefault(text => text.Pred == possibleDirect);
                    if (editedRow == ttreeInd)
                    {
                           <td></td>
                    }
                    else
                    {
                        if (value != null)
                        {
                            <td><NavLink href="@("/portrait/" + ((TDTree)value).Resource.Id)">@db.GetName(((TDTree)value).Resource)</NavLink></td>
                        }
                        else
                        {
                            <td></td>
                        }
                    }
                }
                var currentInd = ttreeInd;
                if (i == possibleDirects.Count() - 1)
                {
                    if (editedRow != currentInd)
                    {
                        <td><button @onclick="@(arg => {editedRow = currentInd;})">Изменить</button></td>
                    }
                    else
                    {
                        <td><button @onclick="@(arg => {editedRow = -1; db.TBuilder.SaveTTree(ttree, db); })">Сохранить</button></td>
                    }

                }
            }
        </tr>

    }
</table>


@code {
    [Parameter]
    public TTree[] ttrees { get; set; }

    private int editedRow = -1;

    protected override void OnInitialized() // = On Page Load
    {

    }
    public int GetLangIndex(TTexts texts, string value)
    {
        return value == null ? 0 : Array.FindIndex(texts.Values, (t => t.Text == value));
    }

    public TGroup[] GetExpandedGroup(TTree ttree, string possibleDirect)
    {
        var newTexts = new TGroup[ttree.Groups.Length + 1];
        ttree.Groups.CopyTo(newTexts, 0);
        var textLan = new TextLan("", MainLayout.defaultLanguage);
        var textLanArr = new TextLan[1] { textLan };
        newTexts[ttree.Groups.Length] = new TTexts(possibleDirect, textLanArr);
        return newTexts;
    }

    protected override void OnParametersSet()
    {
        OnInitialized();
    }

    


}
