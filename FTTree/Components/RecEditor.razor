@using Data
@using FactographData
@using System.Net.Http.Json
@using System.Net.Http
@using FactographData.r;
@implements IRecComponent
@inject FactographData.IFDataService db

<table>
    @for (int recInd = 0; recInd < recs.Count(); recInd++)
    {
        var rec = recs[recInd];
        if (rec.Tp == "delete")
        {
            continue;
        }
        var fields = rec.Props.Where(prop => prop is Tex || prop is Str || prop is Dir).ToArray();

        @if (recInd == 0)
        {
            <tr>
                @foreach (var field in fields)
                {
                    <th>@db.GetOntologyLabel(field.Pred)</th>

                }
            </tr>
        }
        <tr>
            @for (int i = 0; i < fields.Count(); i++)
            {
                var field = fields[i];

                <DynamicComponent Type="@db.GetComponentType(field)"
                          Parameters="@(new Dictionary<string, object>(){{"property", field}, {"isEdited", editedRow == recInd}})"> </DynamicComponent>
            
                var currentInd = recInd;
                if (i == fields.Count() - 1)
                {
                    if (editedRow != currentInd)
                    {
                        <td><button @onclick="@(arg => {editedRow = currentInd;})">Изменить</button></td>
                        <td><button @onclick="@(arg => {editedRow = -1; db.DeleteRec(rec); })">Удалить</button></td>
                    }
                    else
                    {
                        <td><button @onclick="@(arg => {editedRow = -1; db.SaveRec(rec); })">Сохранить</button></td>
                    }

                }
            }
        </tr>

    }
</table>
@if (forbidden != null)
{
    <button @onclick="@(arg => AddRecord())">Добавить запись</button>
}

@code {
    [Parameter]
    public Rec[] recs { get; set; }

    [Parameter]
    public string forbidden { get; set; }

    [Parameter]
    public Rec originalRecord { get; set; }

    private int editedRow = -1;

    protected override void OnInitialized() // = On Page Load
    {

    }
    public int GetLangIndex(TextLan[] textLans, string value)
    {
        return value == null ? 0 : Array.FindIndex(textLans, (t => t.Lang == value));
    }

    protected override void OnParametersSet()
    {
        OnInitialized();
    }

    private void AddRecord()
    {
        Rec[] newRecs = new Rec[recs.Length + 1];
        recs.CopyTo(newRecs, 0);
        var domains = db.ontology.DomainsOfProp(forbidden);
        var template = db.GenereateTempalate(domains.FirstOrDefault(), 1, forbidden);
        newRecs[recs.Length] = new Rec(null, domains.FirstOrDefault(), template.Props);
        editedRow = recs.Length;
        recs = newRecs;
    }

    


}
