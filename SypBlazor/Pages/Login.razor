@page "/login"
@using FactographData;
@using Family.Authentication;
@inject UserAccountService userAccountService
@inject IFDataService db
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row" style="">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login</h3>
        </div>
        <div class="mb-3">
            <input @bind="username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <input @bind="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Submit</button>
        </div>
    </div>
</div>

@code {
    public string? username { get; set; }
    public string? password { get; set; }

    private async Task Authenticate()
    {
        if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
        {
            await js.InvokeVoidAsync("alert", "Enter login and password");
            return;
        }
        var userAccount = userAccountService.GetByUserName(username);
        if (userAccount == null || userAccount.Password != password)
        {
            await js.InvokeVoidAsync("alert", "Wrong login or password");
            return;
        }
        else if (!db.HasWritabeFogForUser(userAccount?.UserName))
        {
            await js.InvokeVoidAsync("alert", "No writable space for user");
            return;
        }
        else
        {
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new AuthState
                {
                    UserName = username,
                    Role = userAccount?.Role
                });
        }
        navManager.NavigateTo("", true);
    }
}
