@page "/"
@page "/index/{entityId?}/{eid?}"
@using System.Xml.Linq
@using FactographData
@using FactographData.r
@using Family.Authentication;
@inject FactographData.IFDataService db
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@* ========= Тестовая область ========= *@
<div><a href="index/start_page">Тест</a></div>
@* ========= конец ========= *@

<SypBlazor.Components.SearchPanel typs="@typs" user="@user"
    onNewItem="stss => NewItem(((Tuple<string, string>)stss).Item1, ((Tuple<string, string>)stss).Item2)" 
    onSelected="id => OnSelected((string)id)"    />


@if (tree != null)
{
    var invProps = tree.Props.Where(p => p is Inv).Cast<Inv>().ToArray();
    <div>
        <span style="color:green;">@(db.ontology.LabelOfOnto(tree.Tp))</span>
        &nbsp;
        <span>@(tree.Id)</span>
    </div>

    // ========    Это вставка полоски пред. след. к документу =========
    @if (externalId != null)
    {
        string pr = "index/" + prev + "/" + externalId;
        string d = "index/" + externalId;
        string nx = "index/" + next + "/" + externalId;
        <div style="text-align: center;">
            <NavLink href="@d">к источнику</NavLink>
            &nbsp;
            @if (prev == null)
            {
                <span>пред.</span>
            }
            else
            {
                <NavLink href="@pr"><span>пред.</span></NavLink>
            }
            &nbsp;
            @if (next == null)
            {
                <span>след.</span>
            }
            else
            {
                <NavLink href="@nx"><span>след.</span></NavLink>
            }
        </div>
    }


    @if (db.ontology.DescendantsAndSelf("http://fogid.net/o/document").Contains(tree.Tp))
    {
        var uriprop = tree.Props.FirstOrDefault(p => p.Pred == "http://fogid.net/o/uri");
        string? uri = ((Str?)uriprop)?.Value;
        if (tree.Tp == "http://fogid.net/o/photo-doc")
        {
            string sr = "docs/GetImage?u=" + uri + "&s=normal";
            <img src="@sr" />

        }
        else if (tree.Tp == "http://fogid.net/o/video-doc")
        {
            string sr = "docs/GetVideo?u=" + uri + "&s=normal";
            <video width="480" controls>
                <source type="video/webm" src='@(sr + "&ext=webm")' />
                <source type="video/mp4" src='@(sr + "&ext=mp4")' />
                Your browser does not support the video tag.
            </video>

        }
        else if (tree.Tp == "http://fogid.net/o/document")
        {
            string? docmetainfo = ((Str?)tree.Props.FirstOrDefault(p => p.Pred == "http://fogid.net/o/docmetainfo"))?.Value;
            if (docmetainfo != null && docmetainfo.Contains("application/pdf"))
            {
                string sr = "docs/GetPdf?u=" + uri;
                <embed src="@sr" width="100%" height="800" />
            }
            else if (uri != null && (docmetainfo == null || !docmetainfo.Contains("application/fog"))) // Все типы документов кроме .fog
            {
                string sr = "docs/GetDoc?u=" + uri;
                <div style="margin-bottom:10px;"><a href="@sr">Получить копию</a></div>
            }

        }
    }
    <SypBlazor.Components.DrawTable Trees="@(new Rec[] { tree })" 
        onDelete="(id) => Delete((string)id)"
        onCancel="() => StateHasChanged()"
        onOk="() => Build(entityId)"
        user="@user" />
    @if ( true || invProps.Length > 0) //TODO: надо разобраться почему нет пустых обратных списков свойств
    {
        <table style="border:none;">

        @foreach (var iProp in invProps)
        {
            string pred = iProp.Pred;
            Rec[] inv_items = iProp.Sources.Where(g => g != null)
                .ToArray();
            if (user != null || inv_items.Length > 0)
            {
                <tr valign="top">
                    <td>
                        <span style="color:green;">@(db.ontology.InvLabelOfOnto(pred))</span>
                    </td>
                    <td>
                        @if (inv_items.Length > 0)
                        {
                            var fidis = inv_items.Select(item => item.Props).ToArray();
                            if (pred == "http://fogid.net/o/in-collection" 
                                || pred == "http://fogid.net/o/reflected"
                                || pred == "http://fogid.net/o/partItem") // TODO: Можно было бы выделить функцию 
                                {
                                <div>
                                    @foreach (var fidi in fidis)
                                    {
                                        string dirpred = pred == "http://fogid.net/o/reflected" ?
                                            "http://fogid.net/o/in-doc" :
                                            (pred =="http://fogid.net/o/partItem" ? 
                                                "http://fogid.net/o/inDocument" : 
                                                "http://fogid.net/o/collection-item"); // TODO: Можно было бы поизящнее
                                        Dir? di = (Dir?)(fidi.FirstOrDefault(p => p is Dir && p.Pred == dirpred));
                                        if (di != null && di.Resources.Length > 0 && di.Resources[0] != null)
                                        {
                                            var tr = di.Resources[0];
                                            var uriprop = tr.Props.FirstOrDefault(p => p.Pred == "http://fogid.net/o/uri");
                                            string? uri = ((Str?)uriprop)?.Value;
                                            if (tr.Tp == "http://fogid.net/o/photo-doc")
                                            {
                                                string sr = "docs/GetImage?u=" + uri + "&s=small";
                                                <div class="photo mat-elevation-z5">
                                                    <a href="index/@tr.Id/@entityId">
                                                    <img src="@(sr)" alt="" />
                                                    </a>
                                                </div>
                                            }
                                            else
                                            {
                                                var dmiprop = tr.Props.FirstOrDefault(p => p.Pred == "http://fogid.net/o/docmetainfo");
                                                string? dmi = ((Str?)dmiprop)?.Value;
                                                <div class="photo mat-elevation-z5">
                                                    <span>
                                                        <input type="checkbox" />
                                                        @(db.ontology.LabelOfOnto(tr.Tp))
                                                    </span>
                                                    @if (dmi != null && dmi.Contains("application/fog"))
                                                    {
                                                        <span>fog</span>                                                            
                                                    }
                                                    else
                                                    {
                                                        <a href="index/@tr.Id/@entityId">
                                                            @(tr.GetText("http://fogid.net/o/name"))
                                                        </a>
                                                    }
                                                </div>
                                            }
                                        }
                                    }
                                </div>
                            }
                            else
                            {
                                bool issysobj = false;
                                var tty = iProp.Sources[0].Tp;
                                var pre = iProp.Pred;
                                if (user != null)
                                {
                                    <div>
                                        <a href="javascript:void(0)" @onclick="@(e =>NewInverseRelation(tty, pre))">новый</a>
                                    </div>
                                }
                                if (db.ontology.AncestorsAndSelf(tty).Contains("http://fogid.net/o/sys-obj"))
                                { issysobj = true; }
                                <SypBlazor.Components.DrawTable Trees="@(inv_items)" level="1" user="@user"
                                        inverseProp="@(iProp.Pred)" focusId="@(entityId)"
                                    onDelete="(id) => Delete((string)id)"
                                    onOk="() => Build(entityId)"
                                    onCancel="() => StateHasChanged()"
                                    toextendrecord="@toextendrecord"
                                    issysobj="@issysobj"
                                    />
                            }
                        }
                        else
                        {
                            if (user != null)
                            {
                                string pre = iProp.Pred;
                                string tty = db.ontology.DomainsOfProp(pre).First();
                                if (!db.ontology.AncestorsAndSelf(tty).Contains("http://fogid.net/o/sys-obj") &&
                                    !( pred == "http://fogid.net/o/in-collection"
                                    || pred == "http://fogid.net/o/reflected"
                                    || pred == "http://fogid.net/o/partItem"))
                                {
                                    <div>
                                        <a href="javascript:void(0)" @onclick="@(e =>NewInverseRelation(tty, pre))">нов.</a>
                                    </div>
                                }
                                else
                                {
                                    <div>
                                        -
                                    </div>
                                }
                            }
                        }
                    </td>
                </tr>
            }
        }
        </table>
    }
    @if (toextendrecord != null) toextendrecord = null; // Сомнительное решение, направленное на однократное срабатывание...

}
<table>
    <tr>
        <td style="width:100px;"><hr/></td>
        <td>@(user)</td>
        <td width="100%"><hr /></td>
    </tr>
</table>
<div>selected:</div>
@foreach (string se in selected)
{
    <span>@(se) &nbsp;</span>
}
@code {
    [Parameter] // Фокусная запись
    public string? entityId { get; set; }
    [Parameter] // Внешная запись
    public string? eid { get; set; }

    private string[] typs = new string[0];

    private string? toextendrecord = null;

    // Список отобранных отношений к документам, строки - идентификаторы, это идентификаторы отношений 
    private List<string> selected = new List<string>();

    // группа параметров состояния
    struct AppState
    {
        public AppState()
        {
            _toedit = false;
        }
        private bool _toedit = false;
        public bool ToEdit { get { return _toedit; } }
        public bool ToView { get { return !_toedit; } }
    }
    private AppState s = new AppState();

    private void ToSearch()
    {
        StateHasChanged();
    }
    private void ToCancel()
    {
        //searchstring = null;
        StateHasChanged();
    }
    // Мы будем создавать Rec-модель
    private Rec? tree = null;
    private string? prev = null, next = null, externalId = null;
    private void Build(string? id)
    {
        if (id == null) return;
        prev = null; next = null; externalId = null;
        RRecord? rrec = db.GetRRecord(id, true);
        if (rrec != null)
        {
            Rec shablon;
            if (db.ontology.DescendantsAndSelf("http://fogid.net/o/collection").Contains(rrec.Tp))
            {
                shablon = new Rec(null, rrec.Tp,
                    new Tex("http://fogid.net/o/name"),
                    new Inv("http://fogid.net/o/in-collection",
                        new Rec(null, "http://fogid.net/o/collection-member",
                            new Dir("http://fogid.net/o/collection-item",
                                new Rec(null, null,
                                    new Tex("http://fogid.net/o/name"),
                                    new Str("http://fogid.net/o/uri"),
                                    new Str("http://fogid.net/o/docmetainfo"))
                                    ))),
                    new Inv("http://fogid.net/o/collection-item",
                        new Rec(null, "http://fogid.net/o/collection-member",
                            new Dir("http://fogid.net/o/in-collection",
                                new Rec(null, null,
                                    new Tex("http://fogid.net/o/name"))
                                    )))

                    );
            }
            else if (false && rrec.Tp == "http://fogid.net/o/photo-doc")
            {
                shablon = new Rec(null, rrec.Tp,
                    new Tex("http://fogid.net/o/name"),
                    new Str("http://fogid.net/o/from-date"),
                    new Tex("http://fogid.net/o/description"),
                    new Str("http://fogid.net/o/uri"),
                    new Str("http://fogid.net/o/docmetainfo"),
                    inv_parts["http://fogid.net/o/collection-item"]
                    );
            }
            else
            {
                shablon = Rec.GetUniShablon(rrec.Tp, 2, null, db.ontology);
            }
            tree = Rec.Build(rrec, shablon, db.ontology, idd => db.GetRRecord(idd, false));

            // ======== Вычисление полоски ==========
            if (eid != null)
            {
                externalId = eid;
                RRecord? externalRec = db.GetRRecord(externalId, true);
                //var rxobj = new RYEngine(dba);
                string[] docset = new string[0];
                if (externalRec != null && externalRec.Tp == "http://fogid.net/o/document")
                    docset = externalRec.Props
                        .Where(p => p is RInverseLink && p.Prop == "http://fogid.net/o/inDocument").Cast<RInverseLink>()
                        .Select(l =>
                        {
                            //RRecord r = rxobj.GetRRecord(l.Source, false);
                            RRecord? r = db.GetRRecord(l.Source, false);
                            return new { r = r, pg = r?.GetField("http://fogid.net/o/pageNumbers") };
                        })
                        .OrderBy(rpg => rpg.pg)
                        .Select(rpg => rpg.r?.GetDirectResource("http://fogid.net/o/partItem"))
                        .Where(res => res != null)
                        .Cast<string>()
                        .ToArray();
                // Другой вариант
                else if (externalRec != null &&
                    (externalRec.Tp == "http://fogid.net/o/collection" ||
                     externalRec.Tp == "http://fogid.net/o/cassette"))
                    docset = externalRec.Props
                        .Where(p => p is RInverseLink && p.Prop == "http://fogid.net/o/in-collection").Cast<RInverseLink>()
                        .Cast<RInverseLink>()
                        .Select(ril => db.GetRRecord(ril.Source, false).GetDirectResource("http://fogid.net/o/collection-item"))
                        .ToArray();
                else if (externalRec != null && (db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").Contains(externalRec.Tp)))
                    docset = externalRec.Props
                        .Where(p => p is RInverseLink && p.Prop == "http://fogid.net/o/reflected").Cast<RInverseLink>()
                        .Cast<RInverseLink>()
                        .Select(ril => db.GetRRecord(ril.Source, false).GetDirectResource("http://fogid.net/o/in-doc"))
                        .ToArray();
                int ind = Array.IndexOf(docset, rrec.Id);
                if (ind != -1 && ind - 1 >= 0)
                {
                    prev = docset[ind - 1];
                }
                else prev = null;
                if (ind != -1 && ind + 1 < docset.Length)
                {
                    next = docset[ind + 1];
                }
                else next = null;
            }
        }
    }

    private string? user = null;
    private string? look;

    private void FixRecordChanges(Rec rec)
    {
        Func<string, XName> toXName = (string sname) =>
        {
            int pos = sname.LastIndexOfAny(new char[] { '/', '#' } );
            return XName.Get(sname.Substring(pos + 1), sname.Substring(0, pos + 1));
        };
        if (rec != null && rec.Id != null && user != null)
        {
            // Делаем Xml-объект
            XElement xrec = new XElement(toXName(rec.Tp),
                new XAttribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about", rec.Id),
                new XAttribute("owner", user),
                rec.Props.SelectMany<Pro, XElement>(p =>
                {
                    if (p is Tex)
                    {
                        Tex t = (Tex)p;
                        return t.Values.Select(v => new XElement(toXName(p.Pred),
                            new XText(v.Text),
                           string.IsNullOrEmpty(v.Lang) ? new XAttribute("{http://www.w3.org/XML/1998/namespace}lang", "ru") :
                           new XAttribute("{http://www.w3.org/XML/1998/namespace}lang", v.Lang)));
                    }
                    else if (p is Str)
                    {
                        Str s = (Str)p;
                        return Enumerable.Repeat(new XElement(toXName(p.Pred), s.Value), 1);
                    }
                    else if (p is Dir)
                    {
                        Dir d = (Dir)p;
                        return d.Resources.Select(r => new XElement(toXName(p.Pred), 
                            new XAttribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource", r.Id)));
                    }
                    else return new XElement[0];
                }).Where(x => x != null),
                null);
            db.PutItem(xrec);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        var st = await authStateProvider.GetAuthenticationStateAsync();
        user = st.User.Identity?.Name;
        //look = user;
        //await base.OnParametersSetAsync();
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

        if (typs.Length == 0) typs = db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").ToArray();
        if (entityId != null)
        {
            RRecord? rrec = db.GetRRecord(entityId, false);
            if (rrec != null)
            {
                BuildParts();
                Build(entityId);
                //searchstring = null;
                StateHasChanged();
            }
        }
    }
    //protected override void OnParametersSet()
    //{
    //    if (typs.Length == 0) typs = db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").ToArray();
    //    if (entityId != null)
    //    {
    //        BuildParts();
    //        Build(entityId);
    //        //searchstring = null;
    //        StateHasChanged();
    //    }
    //}
    // Шаблоны обратных свойств, размещенные по обратным предикатам
    private Dictionary<string, Inv> inv_parts = new Dictionary<string, Inv>();
    private void BuildParts()
    {
        inv_parts = new Dictionary<string, Inv>();
        inv_parts.Add("http://fogid.net/o/in-collection",
            new Inv("http://fogid.net/o/in-collection",
                new Rec(null, "http://fogid.net/o/collection-member",
                    new Dir("http://fogid.net/o/collection-item",
                        new Rec(null, "http://fogid.net/o/photo-doc",
                            new Str("http://fogid.net/o/uri"),
                            new Str("http://fogid.net/o/docmetainfo")),
                        new Rec(null, null,
                            new Tex("http://fogid.net/o/name"))
                            ))));
        inv_parts.Add("http://fogid.net/o/collection-item",
            new Inv("http://fogid.net/o/collection-item",
                new Rec(null, "http://fogid.net/o/collection-member",
                    new Dir("http://fogid.net/o/in-collection",
                        new Rec(null, null,
                            new Tex("http://fogid.net/o/name"))
                            ))));
    }

    // ============= Навигация
    private void OnSelected(string id)
    {
        navManager.NavigateTo("index/" + id);
    }

    // ==================== Редактирование =======================
    private void NewItem(string searchtype, string searchstring)
    {
        if (string.IsNullOrEmpty(searchstring) || string.IsNullOrEmpty(searchtype)) { return; }
        int pos = searchtype.LastIndexOf('/');
        string local = searchtype.Substring(pos + 1);
        string nsname = searchtype.Substring(0, pos + 1);
        XElement xitem = new XElement(XName.Get(local, nsname),
            new XAttribute("owner", user), 
            new XElement(XName.Get("name", "http://fogid.net/o/"), 
                new XAttribute("{http://www.w3.org/XML/1998/namespace}lang", "ru"),
                searchstring));
        XElement x = db.PutItem(xitem);
        string? nid = x?.Attribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about")?.Value;
        if (nid != null)
        {
            navManager.NavigateTo("index/" + nid);
        }
        //StateHasChanged();
    }
    private void Delete(string id)
    {
        XElement xitem = new XElement("delete",
            new XAttribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about", id),
            new XAttribute("owner", user));
        db.PutItem(xitem);
        if (id == entityId)
        {
            navManager.NavigateTo("index/", true);
        }
        else
        {
            //StateHasChanged();
            Build(entityId);
        }
    }
    //private static XName ToXName(string xid)
    //{
    //    int pos = xid.LastIndexOfAny(new char[] { '/', '#' });
    //    return XName.Get(xid.Substring(pos + 1), xid.Substring(0, pos + 1));
    //}
    private void NewInverseRelation(string tty, string invPred)
    {
        XElement xitem = new XElement(OAData.Adapters.ONames.ToXName(tty),
            new XAttribute("owner", user),
            new XElement(OAData.Adapters.ONames.ToXName(invPred),
                new XAttribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}resource", entityId))
            );
        XElement x = db.PutItem(xitem);
        toextendrecord = x.Attribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about")?.Value;
        Build(entityId);
    }
}