@using Microsoft.AspNetCore.Components.Authorization
@using Family.Authentication
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage;
@inherits LayoutComponentBase
@inject IConfiguration configuration
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject FactographData.IFDataService db
@inject ProtectedLocalStorage browserStorage

@if (configuration != null)
{
    hea = configuration.GetSection("App:header").Value; 
    subhea = configuration.GetSection("App:subheader").Value;
    var lo = configuration.GetSection("App:logo").Value;
    if (!string.IsNullOrEmpty(lo)) logo = lo;
    title = configuration.GetSection("App:title").Value;
    var ico = configuration.GetSection("App:icon").Value;
    if (!string.IsNullOrEmpty(ico)) icon = ico;
}

<PageTitle>@title</PageTitle>

<div class="page">
    @if (expandSubNav)
    {
        <div class="sidebar" style="position:absolute;margin-top:64px;">
            <AuthorizeView>
                <Authorized>
                    <span style="color:white;">@(context.User.Identity?.Name)</span>
                    &nbsp;&nbsp; 
                    <a @onclick="Logout" href="javascript:void(0)">Logout</a>
                </Authorized>
                <NotAuthorized>
                    <!-- <a @onclick="ClickLogin" href="javascript:void(0)">Login</a> -->
                    <NavLink @onclick="ClickLogin" class="nav-link" href="javascript:void(0)">Login</NavLink>
                </NotAuthorized>
            </AuthorizeView>
            <div>
                <NavLink @onclick="Reload" href="javascript:void(0)">Перезагрузить!</NavLink>
                @if (loaddone)
                {
                    <button @onclick="OkButton">ok</button>
                }
            </div>

@*            <div>@(regime)</div>
            <div>
                <select @onchange='SelectRegime'>
                    @if (regime == "home")
                    {
                        <option value="home" selected></option>
                    }
                    else
                    {
                        <option value="home"></option>
                    }
                    @if (regime == "view")
                    {
                        <option value="view" selected>просмотр</option>
                    }
                    else
                    {
                        <option value="view">просмотр</option>
                    }
                    @if (regime == "edit")
                    {
                        <option value="edit" selected>редактир</option>
                    }
                    else
                    {
                        <option value="edit">редактир</option>
                    }
                    @if (regime == "gene")
                    {
                        <option value="gene" selected>семья</option>
                    }
                    else
                    {
                        <option value="gene">семья</option>
                    }
                    @if (regime == "look")
                    {
                        <option value="look" selected>презентация</option>
                    }
                    else
                    {
                        <option value="look">презентация</option>
                    }
                </select>
            </div>
*@
        </div>
    }


    <main>
        <nav class="navbar navbar-expand-xxl navbar-light bg-light" style="height:64px; padding-top:0px;  background-image:url(VertPoloska.jpg)">
            <div class="container-fluid" style="padding-left:0px; padding-top:0px;">
                <a class="navbar-brand" href="#">
                    @*<img src="FlyingBirdsSmall.jpg" alt="" width="268" height="64" style="">*@
                    <img src="@(logo)" alt="" height="58" style="">
                </a>
                <div class="navbar-text" style="">
                    <div style="color: black; font-size:larger; font-weight: bold;">@(hea)</div>
                    <div style="font-size:smaller;">@(subhea)</div>
                </div>

@*                <form class="d-flex">
                    <input class="form-control me-2" type="search" placeholder="текст поиска" />
                    <button class="btn btn-outline-success" type="submit">Искать</button>
                </form>
*@
                <NavLink class="nav-link" @onclick="()=>expandSubNav = !expandSubNav">
                    <span class="navbar-toggler-icon"></span>
                </NavLink>

            </div>
        </nav>


        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool collapseNavMenu = false;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool expandSubNav;

    private string? hea = "";
    private string? subhea = "";
    private string logo = "logo1.jpg";
    private string icon = "favicon.png";
    private string? title = "";
    // Authorization
    private async Task ClickLogin()
    {
        collapseNavMenu = false;
        Console.WriteLine("collapse false");
        navManager.NavigateTo("login/", true);
    }
    private async Task Logout()
    {
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("index", true);
    }

    private bool loaddone = false;
    private void Reload()
    {
        db.Reload();
        loaddone = true;
    }
    private void OkButton()
    {
        loaddone = false;
        collapseNavMenu = false;
        navManager.NavigateTo("index", true);       
    }
    private string? user = null;
    private bool toedit { get { return user != null; } }

    //string regime = "default";
    //protected override async void OnParametersSet()
    //{
    //    var regim = await ((CustomAuthenticationStateProvider)authStateProvider).ReadFromStorage("regime");
    //    regime = regim ?? "default";
    //}

    //async Task SelectRegime(ChangeEventArgs e)
    //{
    //    string? reg = e.Value?.ToString();
    //    if (string.IsNullOrEmpty(reg)) reg = "default";
    //    regime = string.IsNullOrEmpty(reg) ? "default" : reg;
    //    //await StateMemory.SaveInStorage(browserStorage, "regime", regime);
    //    //navManager.NavigateTo("", true);
    //    await ((CustomAuthenticationStateProvider)authStateProvider).SaveInStorage("regime", regime);
    //}


}