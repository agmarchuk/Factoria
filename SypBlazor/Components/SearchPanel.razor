@inject Factograph.Data.IFDataService db

<div>
    <input @bind="searchstring" style="height:24px; margin-top:10px;margin-bottom:10px;" />
    <select @bind="stype" style="height: 24px; margin-top: 10px; margin-bottom: 10px; ">
        <option value=""></option>
        @foreach (var typ in typs.Where(t => db.ontology.LabelOfOnto(t) != null)) //TODO: Надо бы более корректно...
        {
            <option value="@typ">@(db.ontology.LabelOfOnto(typ))</option>
        }
    </select>
    <span>расш.<input type="checkbox" @bind="bywords" /></span>
    <input type="submit" value="искать" style=""  />
</div>

@if (!string.IsNullOrEmpty(searchstring))
{
    foreach (var rec in db.SearchRRecords(searchstring, bywords))
    {
        string tp = rec.Tp;
        if (stype != null && stype != tp) { continue; }
        var date = rec.GetField("http://fogid.net/o/from-date");
        <div>
            <span>@(db.ontology.LabelOfOnto(tp))</span>&nbsp;
            <a href="javascript:void(0)" @onclick="@(e =>SearchResultClick(rec.Id))">@(rec.GetName())</a>
            @if (date != null && date.Length > 3)
            {
                <span>&nbsp; @(date.Substring(0, 4))</span>
            }
        </div>
    }
    if (user != null && !string.IsNullOrEmpty(stype) && db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").Contains(stype))
    {
        <div>
            <a href="javascript:void(0)" @onclick="@(e =>NewItemClick(stype))">нов.</a>
        </div>
    }
    <hr />
}

@code {
    [Parameter]
    public string[] typs { get; set; } = new string[0];
    [Parameter]
    public string? user { get; set; }
    [Parameter]
    public EventCallback onSelected { get; set; }
    [Parameter]
    public EventCallback onNewItem { get; set; }

    private string? searchstring { get; set; }
    private string? stype { get; set; }
    private bool bywords = false;

    private async Task SearchResultClick(string id)
    {
        searchstring = null;
        bywords = false;
        await onSelected.InvokeAsync(id);
    }
    private async Task NewItemClick(string ty)
    {
        if (searchstring != null)
        {
            await onNewItem.InvokeAsync(new Tuple<string, string>(ty, searchstring));
        }
        searchstring = null;
    }
    protected override void OnParametersSet()
    {
        searchstring = null;
    }
}
