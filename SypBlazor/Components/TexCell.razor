@using Factograph.Data.r;
@using Factograph.Data;
@inject Factograph.Data.IFDataService db

@if (property is Tex)
{
    Tex t = (Tex)property;
    var langIndex = GetLangIndex(((Tex)property).Values, currentLanguage);
    bool selru = currentLanguage == "ru";
    bool selen = currentLanguage == "en";
    string selstyle = "background-color:" + (((Tex)property).Values.Length > 1 ? "cyan;" : "lightcyan;");
    if (langIndex == -1)
    {
        TextLan[] newTextLanArray = new TextLan[((Tex)property).Values.Length + 1];
        ((Tex)property).Values.CopyTo(newTextLanArray, 0);
        newTextLanArray[((Tex)property).Values.Length] = new TextLan("", currentLanguage);
        langIndex = ((Tex)property).Values.Length;
        ((Tex)property).Values = newTextLanArray;
    }
    <td>
        <select @onchange="(ChangeEventArgs args) => OnSelectChange(args)" style="@(selstyle)">
            <option value=""></option>
            @if (selru)
            { <option value="ru" selected>ru</option> }
            else
            { <option value="ru">ru</option> }
            @if (selen)
            { <option value="en" selected>en</option> }
            else
            { <option value="en">en</option> }
        </select>
    </td>
    <td style="width:100%;">
        <input type="text" @bind-value="@(((Tex)property).Values[langIndex].Text)"
               hidden="@(string.IsNullOrEmpty(currentLanguage))" style="width:100%;" />
    </td>
}

@code {
    [Parameter]
    public Pro? property { get; set; }

    public string currentLanguage { get; set; } = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (property != null && property is Tex)
        {
            Tex t = (Tex)property;
            string? lang = null, text = null;
            foreach (var v in t.Values)
            {
                if (v.Lang == "ru") { lang = v.Lang; text = v.Text; break; }
                if (v.Lang == "") { lang = v.Lang; text = v.Text; }
                else if (lang != "") { lang = v.Lang; text = v.Text; }
            }
            currentLanguage = lang;
        }
    }
    private void OnSelectChange(ChangeEventArgs args)
    {
        currentLanguage = args.Value==null ? "" : (string)(args.Value);
    }
    private int GetLangIndex(TextLan[] textLans, string value)
    {
        return value == null ? -1 : Array.FindIndex(textLans, (t => t.Lang == value));
    }
    //private string? GetText(Tex tt)
    //{
    //    string? lang = null, text = null;
    //    foreach (var v in tt.Values)
    //    {
    //        if (v.Lang == "ru") { lang = v.Lang; text = v.Text; break; }
    //        if (v.Lang == "") { lang = v.Lang; text = v.Text; }
    //        else if (lang != "") { lang = v.Lang; text = v.Text; }
    //    }
    //    return text;
    //} 
}
