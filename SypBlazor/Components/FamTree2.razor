@using Factograph.Data
@using Factograph.Data.r
@inject Factograph.Data.IFDataService db

<h2>Семья</h2>

<table style="width:100%; border: 1px;">
    <tr>
        <td style="width:150px;">
            @if (father != null)
            {
            <Portretik tree="@MkRec(father?.Id)" Prolog="отец" />
            }
        </td>
        <td style="width:150px;">
            @if (mother != null)
            {
            <Portretik tree="@MkRec(mother?.Id)" Prolog="мать" />
            }
        </td>
        <td style="width:100%;"></td>
    </tr>
    <tr>
        <td rowspan="2" colspan="2">

            <BigBox Prolog="" 
                 Name="@(tree?.GetText("http://fogid.net/o/name"))" 
                 Dates ="@(tree?.GetDates())"
                 PhotoUrl="@(URL)" Regime="photo" Reference=""
                 Epilog="@(epilogue)"
                 Width="300" Height="300" />


        </td>
        <td>
            @foreach (var brId in brothers)
            {
                <div style="float:left; margin-left:20px; margin-top:20px; ">
                    <Portretik tree="@(MkRec(brId))" Prolog="брат/сестра" />
                </div>
            }
        </td>
    </tr>
    <tr>
        <td>
            @foreach (var x in wifes)
            {
                <div style="float:left; margin-left:20px; margin-top:20px; ">
                    <Portretik tree="@(MkRec(x))" Prolog="жена" />
                </div>
            }
            @foreach (var x in husbands)
            {
                <div style="float:left; margin-left:20px; margin-top:20px; ">
                    <Portretik tree="@(MkRec(x))" Prolog="муж" />
                </div>
            }
        </td>
    </tr>
    <tr>
        <td colspan="3" style="">
            <div style="margin-top:20px;">
                @foreach (var c in children)
                {
                    <div style="float:left; margin-left:20px; margin-top:20px; ">
                        <Portretik tree="@(MkRec(c))" Prolog="ребенок" />
                    </div>
                }
                <div style="clear: both;" />
            </div>
        </td>
    </tr>
</table>

@code {
    [Parameter]
    public string? entityId { get; set; } = null;

    private Rec? tree { get; set; }
    private Rec? father = null;
    private Rec? mother = null;
    private string?[] wifes = new string[0];
    private string?[] husbands = new string[0];
    private string[] brothers = new string[0];
    private string?[] children = new string[0];

    private string? descr = null;
    private string? uri = null;
    private string? contenttype = null;
    private string? URL = null;

    private Rec[] titles = new Rec[0];
    private Rec[] reflections = new Rec[0];
    private Rec[] authorof = new Rec[0];

    private string epilogue = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (entityId == null) return;
        father = null;
        mother = null;
        wifes = new string[0];
        husbands = new string[0];
        brothers = new string[0];
        children = new string[0];

        tree = Rec.MkRec(entityId, db.GetRRecord, db.ontology);
        if (tree == null) return;

        var look = tree.GetDirect("http://fogid.net/o/father")?.Id;
        father = MkRec(tree.GetDirect("http://fogid.net/o/father")?.Id);
        mother = MkRec(tree.GetDirect("http://fogid.net/o/mother")?.Id);

        IEnumerable<string> brotherIds = Enumerable.Empty<string>();
        if (father != null) brotherIds = brotherIds.Concat<string>( 
            father.GetInverse("http://fogid.net/o/father")
            .Select(re => re.Id));
        if (mother != null) brotherIds = brotherIds.Concat<string>(
            mother.GetInverse("http://fogid.net/o/mother")
            .Select(re => re.Id));
        brothers = brotherIds.Distinct().Except(new string[] { entityId }).ToArray();
        wifes = tree.GetInverse("http://fogid.net/o/husband")
            .OrderBy(fam => fam.GetStr("http://fogid.net/o/from-date"))
            .Select(fam => fam.GetDirect("http://fogid.net/o/wife")?.Id)
            .ToArray();
        husbands = tree.GetInverse("http://fogid.net/o/wife")
            .OrderBy(fam => fam.GetStr("http://fogid.net/o/from-date"))
            .Select(fam => fam.GetDirect("http://fogid.net/o/husband")?.Id)
            .ToArray();
        var n1 = tree.GetInverse("http://fogid.net/o/father").Count();
        var n2 = tree.GetInverse("http://fogid.net/o/mother").Count();
        children = tree.GetInverse("http://fogid.net/o/father").Concat<Rec>
        (
            tree.GetInverse("http://fogid.net/o/mother")
        )
        .OrderBy(pers => pers.GetStr("http://fogid.net/o/from-date"))
        .Select(r => r.Id)
        .Distinct()
        .ToArray();

        descr = tree.GetText("http://fogid.net/o/description") ?? "";
        // фотка портрета
        URL = null;
        Func<string?, int> ground_order = (string? val) => val == "official" ? 2 :
            (val == "portrait" ? 1 : 0);
        var doc = tree.GetInverse("http://fogid.net/o/reflected")
            .Select(re => (ground_order(re.GetStr("http://fogid.net/o/ground")),
                        re.GetDirect("http://fogid.net/o/in-doc")))
            .Where(gd => gd.Item2?.Tp == "http://fogid.net/o/photo-doc")
            .Select(gd => (gd.Item1, gd.Item2?.GetStr("http://fogid.net/o/from-date"), gd.Item2))
            .OrderBy(gfd => gfd.Item1)
            .ThenBy(gfd => gfd.Item2)
            .LastOrDefault()
            .Item3;
        uri = doc?.GetStr("http://fogid.net/o/uri");
        if (uri != null) 
        { 
            var dmi = doc?.GetStr("http://fogid.net/o/docmetainfo");
            if (dmi != null)
            {
                int pos = dmi.IndexOf("documenttype:");
                string field = dmi.Substring(pos + "documenttype:".Length);
                int pos2 = field.IndexOf(';');
                contenttype = field.Substring(0, pos2);
                if (contenttype.StartsWith("image/"))
                {
                    URL = "docs/GetImage?u=" + uri + "&s=small";
                }
            }
        }
        titles = tree.GetInverse("http://fogid.net/o/titled").ToArray();
        reflections = tree.GetInverse("http://fogid.net/o/reflected").ToArray();
        authorof = tree.GetInverse("http://fogid.net/o/author").ToArray();

        epilogue = descr ?? "";
        if (titles.Length > 0) epilogue += " " + titles.Length + "титулов/наград";
        if (reflections.Length > 0) epilogue += " " + reflections.Length + "отражений";
        if (authorof.Length > 0) epilogue += " автор " + authorof.Length + "документов";
    }
    private Rec? MkRec(string? id)
    {
        if (id == null) return null;
        RRecord? rrec = db.GetRRecord(id, true);
        if (rrec == null) { return null; }
        Rec shablon;
        shablon = Rec.GetUniShablon(rrec.Tp, 2, null, db.ontology);
        Rec tr = Rec.Build(rrec, shablon, db.ontology, idd => db.GetRRecord(idd, false));
        return tr;
    }

}
