@using System.Collections.Generic
@using System.Linq
@using FactographData
@using FactographData.r
@inject FactographData.IFDataService db

<h3>EditTable</h3>
<table border="1" width="100%">
    @if (etree != null)
    {
        foreach (var pp in etree.Props
            .Where(p => !(p is Inv) && p.Pred != inverseProp)
            .Select((p, i) => new { p, i }))
        {
            Pro pr = pp.p;
            int i = pp.i;
            <tr>
                <td>
                    @(db.ontology.LabelOfOnto(pr.Pred))&nbsp;
                </td>
                @if (pr is Tex)
                {
                    Tex t = (Tex)pr;
                    // === Выделим наиболее приоритетный вариант: ru, пусто, en, остальные, нет
                    string[] langvariants = { "ru", "", "en" }; 
                    int ind = -1; // по умолчанию - нет
                    int lv_index = 3;
                    foreach (var tli in t.Values.Select((tl, i) => new {tl, i}))
                    {
                        if (tli.tl.Lang == "ru")
                        {
                            ind = tli.i;
                            lv_index = 0;
                            break;
                        }
                        if (string.IsNullOrEmpty(tli.tl.Lang))
                        {
                            ind = tli.i;
                            lv_index = 1;
                        }
                        else if (tli.tl.Lang == "en" && lv_index > 2)
                        {
                            ind = tli.i;
                            lv_index = 2;
                        }
                        else
                        {
                            ind = tli.i;
                            lv_index = 3;
                        }
                    }
                    // === конец
                    TextLan? tl_current = ind == -1 ? null : t.Values[ind]; 
                    <td>
                        <select @onchange="(ChangeEventArgs args) => onChSelect(i, args)">
                            <option value=""></option>
                            @if (tl_current != null && !string.IsNullOrEmpty(tl_current.Text) && tl_current.Lang == "ru")
                            {
                                <option selected value="ru">ru</option>
                            }
                            else
                            {
                                <option value="ru">ru</option>
                            }
                            @if (tl_current != null && !string.IsNullOrEmpty(tl_current.Text) && tl_current.Lang == "en")
                            {
                                <option selected value="en">en</option>
                            }
                            else
                            {
                                <option value="en">en</option>
                            }
                        </select>
                    </td>
                    <td width="100%">
                        @if (tl_current != null)
                        {
                            <input type="text" @bind-value="tl_current.Text" style="width:100%;">
                            </input>
                        }
                    </td>
                }
                else if (pr is Str)
                {
                    var s = (Str)pr;
                    // ~~~~~~~~~~~~ выделяем вариант перечислимого и создаем под него элемент ~~~~~~
                    if (db.ontology.IsEnumeration(pr.Pred))
                    {
                        var states = db.ontology.EnumPairs(pr.Pred, "ru");
                        <td></td>
                        <td>
                            <select @onchange="@(e => SelectChangeHandler(e.Value, s))">
                                <option value=""></option>
                                @foreach (var item in states)
                                {
                                    if (s.Value == item.Key)
                                    {
                                        <option selected="selected" value="@item.Key">@item.Value</option>
                                    }
                                    else
                                    {
                                        <option value="@item.Key">@item.Value</option>
                                    }
                                }
                            </select>
                        </td>
                    }
                    else
                    {
                        <td></td>
                        <td width="100%">
                            @if (s != null)
                            {
                                <input type="text" @bind-value="s.Value" style="width:100%;">
                                </input>
                            }
                        </td>
                    }
                }
                else if (pr is Dir)
                {
                    Dir d = (Dir)pr;
                    if (d.Resources.Length != 0)
                    {
                        Rec re = d.Resources[0];
                        <td></td>
                        <td>
                            <a href="index/@(re.Id)" target="_blank">@(re.GetText("http://fogid.net/o/name"))</a>
                            &nbsp;
                            <a href="javascript:void(0)" @onclick="@(e => DeleteLink(d.Pred))">x</a>
                        </td>
                    }
                    else
                    {
                        var typps = db.ontology.RangesOfProp(d.Pred)
                            .SelectMany(t => db.ontology.DescendantsAndSelf(t))
                            .Distinct().ToArray();
                        <td></td>
                        <td style="background-color: antiquewhite;">
                            <SypBlazor.Components.SearchPanel typs="@typps" user="@user"
                                onNewItem="stss => NewItemClick((Tuple<string, string>)stss)" 
                                onSelected="idd => OnSelected((string)idd, d.Pred)" />
                        </td>                        
                    }
                    @*
                    if (rr != null)
                    {
                        <td>
                            <a href="javascript:void(0)" @onclick="@(e =>LinkClick(rr.Id))">@(rr.GetName())</a>
                            &nbsp;
                            <a href="javascript:void(0)" @onclick="@(e => DeleteLink(c.Prop))">x</a>
                        </td>
                    }
                    else
                    {
                        if (searchlinkprop == c.Prop)
                        {
                            var typps = db.ontology.RangesOfProp(c.Prop)
                                .SelectMany(t => db.ontology.DescendantsAndSelf(t))
                                .Distinct();
                            <td style="background-color: antiquewhite;">
                                <Family.Components.Search onSelected="(rid) => LinkRecord((string)rid)"
                                                                typs="@(typps.ToArray())" user="@user" />
                            </td>
                        }
                        else
                        {
                            <td style="background-color: antiquewhite;">
                                <a href="javascript:void(0)" @onclick="@(e => SearchLink(c.Prop))">связ.</a>
                            </td>
                        }
                    }
                    *@
                }                
            </tr>
        }
        <tr>
            <td colspan="3">
                <button @onclick="@(args => onOk())">ok</button>&nbsp;
                <button @onclick="onCancel">cancel</button>&nbsp;
            </td>
        </tr>
    }
</table>
<div>@(look)</div>

@code {
    [Parameter]
    public Rec? etree { get; set; }
    [Parameter]
    public string? inverseProp { get; set; }
    [Parameter]
    public string? user { get; set; }
    [Parameter]
    public EventCallback onNewItem { get; set; }

    private void onChSelect(int nom, ChangeEventArgs args)
    {

    }
    private void OnSelected(string idd, string pred)
    {
        Dir di = (Dir)etree.Props.First(pr => pr is Dir && pr.Pred == pred);
        var rr = db.GetRRecord(idd, false);
        if (rr == null) return;
        var nm = rr.GetName();
        di.Resources = new Rec[] { new Rec(rr.Id, rr.Tp, 
            new Pro[] { new Tex("http://fogid.net/o/name", new TextLan(nm, "")) }) };
    }
    private string look; 
    private void onOk()
    {
        look = "onOK";
    }
    private void onCancel()
    {

    }
    private TextLan?[] tlangs = new TextLan[0];
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (etree != null)
        {
            // Создаю массив tlangs 
            tlangs = etree.Props
                .Where(p => p.Pred != inverseProp && !(p is Inv))
                .Select(p =>
                {
                    if (p is Tex)
                    {
                        return new TextLan("", "");
                    }
                    else return (TextLan?)null;
                }).ToArray();

        }
    }
    private void SelectChangeHandler(object e, Str bindProperty)
    {
        ((Str)bindProperty).Value = e.ToString();
    }
    private void DeleteLink(string prop)
    {
        if (etree == null) return;
        Rec etr = new Rec(etree.Id, etree.Tp, etree.Props
            .Select<Pro, Pro>(pr =>
            {
                if (pr.Pred == prop && pr is Dir)
                {
                    Dir d = (Dir)pr;
                    return new Dir(d.Pred, new Rec[0]);
                }
                else
                {
                    return pr;
                }
            }).ToArray()
        );
        etree = etr;
    }
    private void NewItemPair(Tuple<string, string> stss) // на входе пара: тип и образец
    {
        
    }
    private async Task NewItemClick(Tuple<string, string> stss)
    {
        await onNewItem.InvokeAsync(stss);
    }

}
