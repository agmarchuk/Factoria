@using System.Collections.Generic
@using System.Linq
@using System.Xml.Linq
@using Factograph.Data
@using Factograph.Data.r
@inject Factograph.Data.IFDataService db

<table border="1" width="100%">
    @if (etree != null)
    {
        foreach (var pp in etree.Props
            .Where(p => !(p is Inv) && p.Pred != inverseProp)
            .Select((p, i) => new { p, i }))
        {
            Pro pr = pp.p;
            int i = pp.i;
            <tr>
                <td>
                    @(db.ontology.LabelOfOnto(pr.Pred))&nbsp;
                </td>
                @if (pr is Tex)
                {
                    Tex t = (Tex)pr;
                    // === Выделим наиболее приоритетный вариант: ru, пусто, en, остальные, нет
                    string[] langvariants = { "ru", "", "en" }; 
                    int ind = -1; // по умолчанию - нет
                    int lv_index = 3;
                    foreach (var tli in t.Values.Select((tl, i) => new {tl, i}))
                    {
                        if (tli.tl.Lang == "ru")
                        {
                            ind = tli.i;
                            lv_index = 0;
                            break;
                        }
                        if (string.IsNullOrEmpty(tli.tl.Lang))
                        {
                            ind = tli.i;
                            lv_index = 1;
                        }
                        else if (tli.tl.Lang == "en" && lv_index > 2)
                        {
                            ind = tli.i;
                            lv_index = 2;
                        }
                        else
                        {
                            ind = tli.i;
                            lv_index = 3;
                        }
                    }
                    // === конец
                    // Есть следующие ситуации: а) вообще нет текстовых вариантов; б) есть вариант ru 
                    // в) есть вариант en, г) Есть оба варианта. Еще надо "сжать" ru и пустой                    
                    TextLan? tl_current = ind == -1 ? null : t.Values[ind]; 
                    <td>
                        <select @onchange="(ChangeEventArgs args) => onChSelect(i, args)">
                            <option value=""></option>
                            @if (tl_current != null && !string.IsNullOrEmpty(tl_current.Text) && tl_current.Lang == "ru")
                            {
                                <option selected value="ru">ru</option>
                            }
                            else
                            {
                                <option value="ru">ru</option>
                            }
                            @if (tl_current != null && !string.IsNullOrEmpty(tl_current.Text) && tl_current.Lang == "en")
                            {
                                <option selected value="en">en</option>
                            }
                            else
                            {
                                <option value="en">en</option>
                            }
                        </select>
                    </td>
                    <td width="100%">
                        @if (tl_current != null)
                        {
                            <input type="text" @bind-value="tl_current.Text" style="width:100%;">
                            </input>
                        }
                    </td>
                }
                else if (pr is Str)
                {
                    var s = (Str)pr;
                    // ~~~~~~~~~~~~ выделяем вариант перечислимого и создаем под него элемент ~~~~~~
                    if (db.ontology.IsEnumeration(pr.Pred))
                    {
                        var states = db.ontology.EnumPairs(pr.Pred, "ru");
                        <td></td>
                        <td>
                            <select @onchange="@(e => SelectChangeHandler(e.Value, s))">
                                <option value=""></option>
                                @foreach (var item in states)
                                {
                                    if (s.Value == item.Key)
                                    {
                                        <option selected="selected" value="@item.Key">@item.Value</option>
                                    }
                                    else
                                    {
                                        <option value="@item.Key">@item.Value</option>
                                    }
                                }
                            </select>
                        </td>
                    }
                    else
                    {
                        <td></td>
                        <td width="100%">
                            @if (s != null)
                            {
                                <input type="text" @bind-value="s.Value" style="width:100%;">
                                </input>
                            }
                        </td>
                    }
                }
                else if (pr is Dir)
                {
                    Dir d = (Dir)pr;
                    if (d.Resources.Length != 0)
                    {
                        Rec re = d.Resources[0];
                        <td></td>
                        <td>
                            <a href="index/@(re.Id)" target="_blank">@(re.GetText("http://fogid.net/o/name"))</a>
                            &nbsp;
                            <a href="javascript:void(0)" @onclick="@(e => DeleteLink(d.Pred))">x</a>
                        </td>
                    }
                    else
                    {
                        // В это месте, для хендлера onNewItem есть еще дополнительная информация вида:
                        // d.Pred - имя предиката прямой ссылки для данной записи. Отработать onSelected
                        // можно и нужно после появления идентификатора нового айтема. Заталкиваю его в параметры 
                        var typps = db.ontology.RangesOfProp(d.Pred)
                            .SelectMany(t => db.ontology.DescendantsAndSelf(t))
                            .Distinct().ToArray();
                        <td></td>
                        <td style="background-color: antiquewhite;">
                            <SypBlazor.Components.SearchPanel typs="@typps" user="@user"
                                onNewItem="stss => NewItemClick((Tuple<string, string>)stss, d.Pred)" 
                                onSelected="idd => OnSelected((string)idd, d.Pred)" 
                                />
                        </td>                        
                    }
                }                
            </tr>
        }
        <tr>
            <td colspan="3">
                <MatBlazor.MatButton @onclick="@(args => onOkClick())" Outlined="true">ok</MatBlazor.MatButton>&nbsp;
                <MatBlazor.MatButton @onclick="@(onCancelClick)" Outlined="true">cancel</MatBlazor.MatButton>&nbsp;
            </td>
        </tr>
    }
</table>

@code {
    [Parameter]
    public Rec etree { get; set; } = new Rec("", "");
    [Parameter]
    public string? inverseProp { get; set; }
    [Parameter]
    public string? user { get; set; }
    [Parameter]
    public EventCallback onNewItem { get; set; }
    [Parameter]
    public EventCallback onCancel { get; set; }
    [Parameter]
    public EventCallback onOk { get; set; }

    private string look = "";
    private async Task onOkClick()
    {
        await onOk.InvokeAsync(etree);
    }
    private async Task onCancelClick()
    {
        await onCancel.InvokeAsync();
    }
    // Обработка выбора селектроа языка. Имеется номер поля, в args запрятоно значение селектора, напр. "ru"
    private void onChSelect(int nom, ChangeEventArgs args)
    {
        string? lang = (string?)(args?.Value);
        // Выделим свойство номер nom
        Pro pr = etree.Props[nom];
        // Это должно быть свойство типа Tex
        Tex te = (Tex)pr;
        // поищу есть ли свойство с заданным языком
        TextLan? curr_new = te.Values.FirstOrDefault(tl => tl.Lang == lang);
        if (curr_new == null)
        {
            // Надо сформировать новое значение и добавить в массив свойств
            curr_new = new TextLan("", lang);
            TextLan[] vals = te.Values.Append(curr_new).ToArray();
            te.Values = vals;
        }
    }
    private void OnSelected(string idd, string pred)
    {
        Dir di = (Dir)etree.Props.First(pr => pr is Dir && pr.Pred == pred);
        var rr = db.GetRRecord(idd, false);
        if (rr == null) return;
        //var nm = rr.GetName();
        string nm = "";
        string lan = "";
        foreach (var pr in rr.Props.Where(p => p is RField && p.Prop == "http://fogid.net/o/name"))
        {
            RField f = (RField)pr;
            if (f.Lang == "ru") { nm = f.Value; lan = f.Lang; break; }
            if (f.Lang == "en") { nm = f.Value; lan = f.Lang; }
            else if (f.Lang != "en") { nm = f.Value; lan = f.Lang; }
        }
        di.Resources = new Rec[] { new Rec(rr.Id, rr.Tp, 
            new Pro[] { new Tex("http://fogid.net/o/name", new TextLan(nm, lan)) }) };
        //StateHasChanged();
    }
    //private TextLan?[] tlangs = new TextLan[0];
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (etree != null)
        {
            // Создаю массив tlangs 
            //tlangs = etree.Props
            //    .Where(p => p.Pred != inverseProp && !(p is Inv))
            //    .Select(p =>
            //    {
            //        if (p is Tex)
            //        {
            //            return new TextLan("", "");
            //        }
            //        else return (TextLan?)null;
            //    }).ToArray();

        }
    }
    private void SelectChangeHandler(object e, Str bindProperty)
    {
        ((Str)bindProperty).Value = e.ToString();
    }
    private void DeleteLink(string prop)
    {
        if (etree == null) return;
        Rec etr = new Rec(etree.Id, etree.Tp, etree.Props
            .Select<Pro, Pro>(pr =>
            {
                if (pr.Pred == prop && pr is Dir)
                {
                    Dir d = (Dir)pr;
                    return new Dir(d.Pred, new Rec[0]);
                }
                else
                {
                    return pr;
                }
            }).ToArray()
        );
        etree = etr;
        StateHasChanged();
    }

    //private async Task NewItemClick(Tuple<string, string> stss, string pred) // на входе пара: тип и образец и ид предиката
    //{
    //    // Посылаю кортеж из трех элементов: тип записи, поисковая строка, предикат прямой связи
    //    await onNewItem.InvokeAsync(stss);
    //}
    private void NewItemClick(Tuple<string, string> stss, string pred) // на входе пара: тип и образец и ид предиката
    {
        string ty = stss.Item1;
        string ss = stss.Item2;
        XElement xitem = new XElement(Factograph.Data.Adapters.ONames.ToXName(ty),
            new XAttribute("owner", user),
            new XElement("{http://fogid.net/o/}name", ss));
        XElement x = db.PutItem(xitem);
        string nid = x.Attribute("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}about").Value;
        this.OnSelected(nid, pred);
    }
}
