@page "/edit/{entityId?}/{eid?}"
@using FactographData
@using FactographData.r
@inject FactographData.IFDataService db

<div>
    <input @bind="searchstring" style="height:24px; margin-top:10px;margin-bottom:10px;" />
    <select @bind="stype" style="height: 24px; margin-top: 10px; margin-bottom: 10px; ">
        <option value=""></option>
        @foreach (var typ in typs.Where(t => db.ontology.LabelOfOnto(t) != null)) //TODO: Надо бы более корректно...
        {
            <option value="@typ">@(db.ontology.LabelOfOnto(typ))</option>
        }
    </select>
    <span>расш.<input type="checkbox" @bind="bywords" /></span>
</div>

@if (!string.IsNullOrEmpty(searchstring))
{
    foreach (var rec in db.SearchRRecords(searchstring, bywords))
    {
        string tp = rec.Tp;
        if (stype != null && stype != tp) { continue; }
        var date = rec.GetField("http://fogid.net/o/from-date");
        <div>
            <span>@(db.ontology.LabelOfOnto(tp))</span>&nbsp;
            <a href="edit/@(rec.Id)">@(rec.GetName())</a>
            @if (date != null)
            {
                <span>&nbsp; @(date.Substring(0,4))</span>
            }
        </div>
    }
}

@if (tree != null)
{
    Pro[][] fieldsdirects = new Pro[][]
        { tree.Props.Where(p => p is Str | p is Tex | p is Dir).ToArray() };
    var invProps = tree.Props.Where(p => p is Inv).Cast<Inv>().ToArray();
    <Publicia.Components.DrawTable fieldsdirects="@(fieldsdirects)" />

    @foreach (var iProp in invProps)
    {
        string pred = iProp.Pred;
        Rec[] inv_items = iProp.Sources.Where(g => g != null)
            .ToArray();
        if (s.ToEdit || inv_items.Length > 0)
        {
            <tr valign="top">
                <td>
                    <span style="color:green;">@(db.ontology.InvLabelOfOnto(pred))</span>
                </td>
                <td>
                    @if (inv_items.Length > 0)
                    {
                        var fidis = inv_items.Select(item => item.Props).ToArray();
                        int n = 33;
                        <Publicia.Components.DrawTable fieldsdirects="@(fidis)" level="1" />
                    }
                </td>
            </tr>
        }
    }
}


@code {
    [Parameter] // Фокусная запись
    public string? entityId { get; set; }
    [Parameter] // Внешная запись
    public string? eid { get; set; }

    private string[] typs = new string[0];
    private string stype { get; set; }
    private string all = "";
    private string searchstring { get; set; }
    private bool bywords { get; set; }

    // группа параметров состояния
    struct AppState
    {
        public AppState()
        {
            _toedit = false;
        }
        private bool _toedit = false;
        public bool ToEdit { get { return _toedit; } }
        public bool ToView { get { return !_toedit; } }
    }
    private AppState s = new AppState();

    private void ToSearch()
    {
        StateHasChanged();
    }
    private void ToCancel()
    {
        searchstring = null;
        StateHasChanged();
    }
    // Мы будем создавать Rec-модель
    private Rec? tree = null;
    private void Build(string id)
    {
        RRecord? rrec = db.GetRRecord(id, true);
        if (rrec != null)
        {
            var shablon = Rec.GetUniShablon(rrec.Tp, 2, null, db.ontology);
            tree = Rec.Build(rrec, shablon, db.ontology, idd => db.GetRRecord(idd, false));
        }
    }

    protected override void OnParametersSet()
    {
        if (typs.Length == 0) typs = db.ontology.DescendantsAndSelf("http://fogid.net/o/sys-obj").ToArray();
        if (entityId != null)
        {
            Build(entityId);
            searchstring = null;
        }
    }
}
